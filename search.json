[{"title":"Introduction to Computer Programming:A Beginner's Guide","url":"/2025/08/30/Introduction-to-Computer-Programming/","content":"🧠 Overview | 概覽This post summarizes key concepts from the CS1302: Introduction to Computer Programming lecture notes from City University of Hong Kong.本文總結了香港城市大學《CS1302：電腦編程入門》課程筆記的重點內容。\nIt covers computer fundamentals, programming concepts, and an introduction to Python. Designed for beginners, it explains everything from hardware basics to why Python is a great starting language.內容涵蓋電腦基本原理、編程概念，以及 Python 語言入門。這是一份為初學者設計的指南，從硬件基礎到為什麼 Python 是理想的入門語言都有詳細說明。\n💻 What is a Computer? | 什麼是電腦？\nA computer is more than an advanced calculator—it’s an electronic device that manipulates data and performs arithmetic operations.電腦不僅僅是高級計算機，它是一種能夠處理資料並執行算術操作的電子設備。\nUnlike ancient tools like the abacus, modern computers are programmable and versatile.與古老的工具如算盤不同，現代電腦具有可編程性和多功能性。\n🧩 Von Neumann Architecture | 馮·諾依曼架構Most computers follow the Von Neumann architecture, which includes:大多數電腦遵循「馮·諾依曼架構」，包括：\n\nInput&#x2F;Output Devices: Read&#x2F;write data to&#x2F;from memory on CPU command.輸入&#x2F;輸出設備：根據 CPU 指令讀取或寫入記憶體資料。\nExamples: Keyboard (input), Monitor (output), Touchscreen (both).例子：鍵盤（輸入）、顯示器（輸出）、觸控螢幕（輸入與輸出）。\n\n\nCentral Processing Unit (CPU): The “brain” of the computer.中央處理器（CPU）：電腦的「大腦」。\nArithmetic and Logic Unit (ALU): Performs binary math operations.算術邏輯單元（ALU）：執行二進位數學運算。\nControl Unit (CU): Directs program execution.控制單元（CU）：指導程式執行流程。\n\n\nMain Memory: Stores data and instructions.主記憶體：儲存資料與指令。\n\n\n🧪 A CPU simulator in the original notes visualizes the fetch-decode-execute cycle.🧪 原教材中的 CPU 模擬器展示了「提取-解碼-執行」循環。\n\n🧠 What’s in a Computer? | 電腦的組成A CPU consists of several main components:一個 CPU 包含以下主要組件：\n\n\nArithmetic Logic Unit (ALU): Performs arithmetic and logical operations.算術邏輯單元（ALU）：執行算術和邏輯運算。\nControl Unit (CU): Directs processor operations.控制單元（CU）：指導處理器的操作。\nRegisters: Small, fast storage locations for temporary data and instructions.暫存器：用於暫時儲存資料和指令的小型高速儲存區。\n\n🗂️ Memory Types | 記憶體類型\nRAM (Random Access Memory): Volatile; holds data during execution.RAM（隨機存取記憶體）：揮發性；執行期間儲存資料。\nSubtypes: SRAM (fast), DRAM (cheap).子類型：SRAM（快速）、DRAM（便宜）。\n\n\nROM (Read-Only Memory): Non-volatile; stores boot essentials.ROM（唯讀記憶體）：非揮發性；儲存開機所需資料。\nSubtypes: PROM, EPROM, EEPROM.子類型：PROM、EPROM、EEPROM。\n\n\n\n🧑‍💻 What is Programming? | 什麼是編程？Programming is the process of writing instructions for computers to perform tasks.編程是撰寫指令讓電腦執行特定任務的過程。\nIt’s like giving step-by-step directions in a language the computer understands.就像用電腦能理解的語言提供逐步指示。\n🔣 Programming Languages | 編程語言Computers use binary (0s and 1s) for data and instructions.電腦使用 二進位（0 和 1） 來表示資料與指令。\n\nExample: Intel CPU addition → 00000011 00000100例子：Intel CPU 加法 → 00000011 00000100\nWhy Binary? Reliable for electronic circuits (on&#x2F;off states).為什麼使用二進位？因為電子電路的開&#x2F;關狀態非常可靠。\n\n🕰️ Historical Note | 歷史小知識\nENIAC (1940s): First electronic computer.ENIAC（1940年代）：第一台電子電腦。\nUsed switches and inefficient decimal representation (10 bits &#x3D; 1024 values).使用開關並以低效方式表示十進位數字（10 位元 &#x3D; 1024 種可能）。\n\n\n\n📏 Standards for Representation | 資料表示標準\nASCII: 8-bit codes for English characters (A &#x3D; 01000001)ASCII：8 位元英文字元編碼（如 ‘A’ &#x3D; 01000001）\nUnicode: Supports global languages (e.g., Chinese, Japanese)Unicode：支援全球語言（如中文、日文）\nNumbers:  \n2’s complement for negatives負數使用二的補數  \nIEEE floating-point for decimals小數使用 IEEE 浮點格式\n\n\n\n🧬 Generations of Programming Languages | 編程語言世代\n\n\nGeneration\nDescription\nExample\n\n\n\n1st\nMachine Language (binary)\n10101010\n\n\n第一代\n機器語言（二進位）\n10101010\n\n\n2nd\nAssembly Language (mnemonics)\nADD, SUB\n\n\n第二代\n組合語言（助記符）\nADD, SUB\n\n\n3rd\nHigh-Level Languages\nPython, Java, C++\n\n\n第三代\n高階語言（人類可讀）\nPython, Java, C++\n\n\n\n🧠 Assembly is still useful for microprocessors. A simulator demo compares assembly vs. high-level code.🧠 組合語言仍適用於微處理器等高效率場景。教材中有模擬器展示組合語言與高階語言的比較。\n\n🐍 Introduction to Python | Python 語言簡介Python is chosen for its:選擇 Python 的原因：\n\nExpressiveness: Write less, do more.表達力強：少量程式碼即可完成任務。\nPopularity: Rich libraries (math, AI, graphics).廣泛使用：擁有大量函式庫（數學、AI、圖形等）。\nFree &amp; Open-Source: No restrictions.免費且開源：無使用限制。\nPortability: Runs on multiple platforms.可移植性高：跨平台執行無需修改。\n\n🧪 Sample Python Program | Python 範例程式碼import datetime  # library to obtain current yearcohort = input(&quot;In which year did you join CityU? [e.g., 2020]&quot;)year = datetime.datetime.now().year - int(cohort) + 1print(&quot;So you are a year&quot;, year, &quot;student.&quot;)\n\n","categories":["Programming"],"tags":["Python","CS1302","CityU","Beginner"]},{"title":"Test 01","url":"/2025/08/26/My-First-Post/","content":"Welcome to my blog!This is my first post using Hexo and the Butterfly theme.\nWhy I started this blog\nTo share my journey of self-improvement\nTo document what I learn about technology\nTo connect with like-minded people\n\ndef hello():    print(&quot;Hello, Hexo + Butterfly !&quot;)\n\nOutput:\nHello, Hexo + Butterfly + Python!\nStay tuned for more updates!\n","categories":["Test"],"tags":["introduction","first"]},{"title":"Python Basic","url":"/2025/08/30/Python-basic-en/","content":"\n  切换到中文版本 🇨🇳\n\n\nA Collection of Common Python Code SnippetsThis blog post provides a curated list of commonly used Python code snippets, covering basic operations, data structures, file handling, and more. Each snippet includes a brief explanation and is ready to use or adapt for your projects. Whether you’re a beginner or an experienced developer, these examples will serve as a handy reference.\n1. Hello WorldThe classic “Hello, World!” program to get started with Python.\nprint(&quot;Hello, World!&quot;)\n\nExplanation: The print() function outputs text to the console. This is often the first program written to test Python’s setup.\n\n2. Working with ListsLists are one of Python’s most versatile data structures. Here’s how to create, append, and iterate over a list.\n# Create a listfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]# Append an itemfruits.append(&quot;grape&quot;)# Iterate over the listfor fruit in fruits:    print(f&quot;Fruit: &#123;fruit&#125;&quot;)\n\nExplanation: Lists are ordered, mutable collections. The append() method adds an item to the end, and a for loop iterates over each element.\n\n3. Dictionary OperationsDictionaries store key-value pairs. This snippet shows how to create, access, and update a dictionary.\n# Create a dictionaryperson = &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;# Access a valueprint(person[&quot;name&quot;])  # Output: Alice# Update a valueperson[&quot;age&quot;] = 26# Add a new key-value pairperson[&quot;job&quot;] = &quot;Engineer&quot;# Iterate over keys and valuesfor key, value in person.items():    print(f&quot;&#123;key&#125;: &#123;value&#125;&quot;)\n\nExplanation: Dictionaries are mutable and allow fast key-based access. Use items() to iterate over key-value pairs.\n\n4. File Reading and WritingReading from and writing to files is a common task in Python.\n# Write to a filewith open(&quot;example.txt&quot;, &quot;w&quot;) as file:    file.write(&quot;Hello, this is a test file!\\n&quot;)    file.write(&quot;Second line.&quot;)# Read from a filewith open(&quot;example.txt&quot;, &quot;r&quot;) as file:    content = file.read()    print(content)\n\nExplanation: The with statement ensures the file is properly closed after use. Mode &quot;w&quot; is for writing, and &quot;r&quot; is for reading.\n\n5. List ComprehensionList comprehensions provide a concise way to create lists based on existing iterables.\n# Create a list of squares for numbers 1 to 5squares = [x**2 for x in range(1, 6)]print(squares)  # Output: [1, 4, 9, 16, 25]# Filter even numbersevens = [x for x in range(10) if x % 2 == 0]print(evens)  # Output: [0, 2, 4, 6, 8]\n\nExplanation: List comprehensions combine loops and conditionals into a single line, improving readability and efficiency.\n\n6. Function DefinitionFunctions help organize code into reusable blocks.\ndef calculate_area(length, width):    &quot;&quot;&quot;Calculate the area of a rectangle.&quot;&quot;&quot;    return length * width# Call the functionarea = calculate_area(5, 3)print(f&quot;Area: &#123;area&#125;&quot;)  # Output: Area: 15\n\nExplanation: The def keyword defines a function. The docstring (&quot;&quot;&quot;...&quot;&quot;&quot;) describes its purpose, and return outputs the result.\n\n7. Exception HandlingHandle errors gracefully with try-except blocks.\ntry:    num = int(input(&quot;Enter a number: &quot;))    result = 10 / num    print(f&quot;Result: &#123;result&#125;&quot;)except ZeroDivisionError:    print(&quot;Error: Cannot divide by zero!&quot;)except ValueError:    print(&quot;Error: Please enter a valid number!&quot;)\n\nExplanation: The try block runs code that might raise an error. except blocks handle specific exceptions, preventing the program from crashing.\n\n8. Working with SetsSets are useful for storing unique items and performing set operations.\n# Create a setnumbers = &#123;1, 2, 2, 3, 4&#125;  # Duplicates are removedprint(numbers)  # Output: &#123;1, 2, 3, 4&#125;# Set operationsother_numbers = &#123;3, 4, 5, 6&#125;union = numbers | other_numbersintersection = numbers &amp; other_numbersprint(f&quot;Union: &#123;union&#125;&quot;)  # Output: Union: &#123;1, 2, 3, 4, 5, 6&#125;print(f&quot;Intersection: &#123;intersection&#125;&quot;)  # Output: Intersection: &#123;3, 4&#125;\n\nExplanation: Sets automatically remove duplicates. Operators like | (union) and &amp; (intersection) perform set operations.\n\n9. String ManipulationPython offers powerful string manipulation tools.\ntext = &quot;  Hello, Python!  &quot;# Strip whitespacecleaned = text.strip()print(cleaned)  # Output: Hello, Python!# Split into wordswords = cleaned.split()print(words)  # Output: [&#x27;Hello,&#x27;, &#x27;Python!&#x27;]# Join wordsjoined = &quot;-&quot;.join(words)print(joined)  # Output: Hello,-Python!\n\nExplanation: Methods like strip(), split(), and join() make string processing straightforward.\n\n10. Lambda FunctionsLambda functions are anonymous, single-expression functions for quick operations.\n# Define a lambda functionsquare = lambda x: x**2print(square(5))  # Output: 25# Use with sorted()points = [(1, 2), (3, 1), (2, 3)]sorted_points = sorted(points, key=lambda x: x[1])print(sorted_points)  # Output: [(3, 1), (1, 2), (2, 3)]\n\nExplanation: Lambda functions are concise alternatives to regular functions, often used with functions like sorted() or map().\n\n11. Working with DatesThe datetime module helps handle dates and times.\nfrom datetime import datetime, timedelta# Current date and timenow = datetime.now()print(f&quot;Current time: &#123;now&#125;&quot;)# Add 3 daysfuture = now + timedelta(days=3)print(f&quot;Three days later: &#123;future&#125;&quot;)\n\nExplanation: The datetime module provides classes for date and time manipulation. timedelta is used for arithmetic with dates.\n\n12. List SlicingSlicing allows you to extract parts of a list (or other sequences).\nnumbers = [0, 1, 2, 3, 4, 5]# Get first three elementsfirst_three = numbers[:3]print(first_three)  # Output: [0, 1, 2]# Get every second elementevery_second = numbers[::2]print(every_second)  # Output: [0, 2, 4]\n\nExplanation: The syntax [start:end:step] extracts a portion of a list. Omitting start or end uses the list’s boundaries.\n\nConclusionThese Python snippets cover common tasks and demonstrate Python’s simplicity and power. Use them as a starting point for your projects or as a quick reference when coding. Python’s readability and flexibility make it ideal for both beginners and advanced developers. Happy coding!\n","categories":["Programming"],"tags":["Python","CS1302","CityU","Beginner"]},{"title":"常用Python代码片段集合","url":"/2025/08/30/Python-basic-cn/","content":"Switch to English Version 🇬🇧\n常用Python代码片段集合本文提供了一份精心挑选的常用Python代码片段列表，涵盖基本操作、数据结构、文件处理等内容。每个片段都附有简要说明，可直接使用或根据您的项目需求进行调整。无论您是初学者还是经验丰富的开发者，这些示例都将是一个方便的参考。\n1. 你好，世界！经典的“你好，世界！”程序，帮助您开始使用Python。\nprint(&quot;你好，世界！&quot;)\n\n说明：print() 函数将文本输出到控制台。这通常是测试Python环境设置的第一个程序。\n\n2. 列表操作列表是Python中最通用的数据结构之一。以下是如何创建、添加和遍历列表的示例。\n# 创建列表fruits = [&quot;苹果&quot;, &quot;香蕉&quot;, &quot;橙子&quot;]# 添加项fruits.append(&quot;葡萄&quot;)# 遍历列表for fruit in fruits:    print(f&quot;水果：&#123;fruit&#125;&quot;)\n\n说明：列表是有序、可变的集合。append() 方法将项添加到列表末尾，for 循环用于遍历每个元素。\n\n3. 字典操作字典用于存储键值对。此片段展示如何创建、访问和更新字典。\n# 创建字典person = &#123;&quot;姓名&quot;: &quot;Alice&quot;, &quot;年龄&quot;: 25, &quot;城市&quot;: &quot;纽约&quot;&#125;# 访问值print(person[&quot;姓名&quot;])  # 输出：Alice# 更新值person[&quot;年龄&quot;] = 26# 添加新的键值对person[&quot;职业&quot;] = &quot;工程师&quot;# 遍历键和值for key, value in person.items():    print(f&quot;&#123;key&#125;: &#123;value&#125;&quot;)\n\n说明：字典是可变的，支持基于键的快速访问。使用 items() 方法遍历键值对。\n\n4. 文件读写在Python中，读写文件是常见任务。\n# 写入文件with open(&quot;example.txt&quot;, &quot;w&quot;) as file:    file.write(&quot;你好，这是一个测试文件！\\n&quot;)    file.write(&quot;第二行。&quot;)# 读取文件with open(&quot;example.txt&quot;, &quot;r&quot;) as file:    content = file.read()    print(content)\n\n说明：with 语句确保文件使用后正确关闭。&quot;w&quot; 模式用于写入，&quot;r&quot; 模式用于读取。\n\n5. 列表推导式列表推导式提供了一种简洁的方式，基于现有可迭代对象创建列表。\n# 创建1到5的平方列表squares = [x**2 for x in range(1, 6)]print(squares)  # 输出：[1, 4, 9, 16, 25]# 筛选偶数evens = [x for x in range(10) if x % 2 == 0]print(evens)  # 输出：[0, 2, 4, 6, 8]\n\n说明：列表推导式将循环和条件语句合并成一行，提高可读性和效率。\n\n6. 函数定义函数帮助将代码组织成可重用的块。\ndef calculate_area(length, width):    &quot;&quot;&quot;计算矩形面积。&quot;&quot;&quot;    return length * width# 调用函数area = calculate_area(5, 3)print(f&quot;面积：&#123;area&#125;&quot;)  # 输出：面积：15\n\n说明：def 关键字定义函数。文档字符串（&quot;&quot;&quot;...&quot;&quot;&quot;）描述函数用途，return 输出结果。\n\n7. 异常处理使用 try-except 块优雅地处理错误。\ntry:    num = int(input(&quot;请输入一个数字：&quot;))    result = 10 / num    print(f&quot;结果：&#123;result&#125;&quot;)except ZeroDivisionError:    print(&quot;错误：不能除以零！&quot;)except ValueError:    print(&quot;错误：请输入有效数字！&quot;)\n\n说明：try 块运行可能引发错误的代码。except 块处理特定异常，防止程序崩溃。\n\n8. 集合操作集合用于存储唯一项并执行集合操作。\n# 创建集合numbers = &#123;1, 2, 2, 3, 4&#125;  # 自动移除重复项print(numbers)  # 输出：&#123;1, 2, 3, 4&#125;# 集合操作other_numbers = &#123;3, 4, 5, 6&#125;union = numbers | other_numbersintersection = numbers &amp; other_numbersprint(f&quot;并集：&#123;union&#125;&quot;)  # 输出：并集：&#123;1, 2, 3, 4, 5, 6&#125;print(f&quot;交集：&#123;intersection&#125;&quot;)  # 输出：交集：&#123;3, 4&#125;\n\n说明：集合自动移除重复项。操作符如 |（并集）和 &amp;（交集）执行集合操作。\n\n9. 字符串操作Python 提供强大的字符串处理工具。\ntext = &quot;  你好，Python！  &quot;# 去除空格cleaned = text.strip()print(cleaned)  # 输出：你好，Python！# 分割成单词words = cleaned.split()print(words)  # 输出：[&#x27;你好，&#x27;, &#x27;Python！&#x27;]# 连接单词joined = &quot;-&quot;.join(words)print(joined)  # 输出：你好，-Python！\n\n说明：strip()、split() 和 join() 方法使字符串处理变得简单。\n\n10. Lambda 函数Lambda 函数是匿名的单表达式函数，适合快速操作。\n# 定义 lambda 函数square = lambda x: x**2print(square(5))  # 输出：25# 配合 sorted() 使用points = [(1, 2), (3, 1), (2, 3)]sorted_points = sorted(points, key=lambda x: x[1])print(sorted_points)  # 输出：[(3, 1), (1, 2), (2, 3)]\n\n说明：Lambda 函数是常规函数的简洁替代，常用于 sorted() 或 map() 等函数。\n\n11. 日期处理datetime 模块帮助处理日期和时间。\nfrom datetime import datetime, timedelta# 当前日期和时间now = datetime.now()print(f&quot;当前时间：&#123;now&#125;&quot;)# 添加3天future = now + timedelta(days=3)print(f&quot;三天后：&#123;future&#125;&quot;)\n\n说明：datetime 模块提供日期和时间操作的类。timedelta 用于日期算术运算。\n\n12. 列表切片切片允许您提取列表（或其他序列）的部分内容。\nnumbers = [0, 1, 2, 3, 4, 5]# 获取前三个元素first_three = numbers[:3]print(first_three)  # 输出：[0, 1, 2]# 获取每隔一个元素every_second = numbers[::2]print(every_second)  # 输出：[0, 2, 4]\n\n说明：[start:end:step] 语法提取列表的一部分。省略 start 或 end 使用列表的边界。\n\n结论这些Python代码片段涵盖了常见任务，展示了Python的简单性和强大功能。它们可以作为您项目的起点或编码时的快速参考。Python的可读性和灵活性使其成为初学者和高级开发者的理想选择。快乐编码！\n\n发布于 \n","categories":["Programming"],"tags":["Python","CS1302","CityU","Beginner"]}]