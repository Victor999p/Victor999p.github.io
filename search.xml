<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Introduction to Computer Programming:A Beginner&#39;s Guide</title>
    <url>/posts/6778c1a2.html</url>
    <content><![CDATA[🧠 Overview | 概覽This post summarizes key concepts from the CS1302: Introduction to Computer Programming lecture notes from City University of Hong Kong.本文總結了香港城市大學《CS1302：電腦編程入門》課程筆記的重點內容。
It covers computer fundamentals, programming concepts, and an introduction to Python. Designed for beginners, it explains everything from hardware basics to why Python is a great starting language.內容涵蓋電腦基本原理、編程概念，以及 Python 語言入門。這是一份為初學者設計的指南，從硬件基礎到為什麼 Python 是理想的入門語言都有詳細說明。
💻 What is a Computer? | 什麼是電腦？
A computer is more than an advanced calculator—it’s an electronic device that manipulates data and performs arithmetic operations.電腦不僅僅是高級計算機，它是一種能夠處理資料並執行算術操作的電子設備。
Unlike ancient tools like the abacus, modern computers are programmable and versatile.與古老的工具如算盤不同，現代電腦具有可編程性和多功能性。
🧩 Von Neumann Architecture | 馮·諾依曼架構Most computers follow the Von Neumann architecture, which includes:大多數電腦遵循「馮·諾依曼架構」，包括：

Input/Output Devices: Read/write data to/from memory on CPU command.輸入/輸出設備：根據 CPU 指令讀取或寫入記憶體資料。
Examples: Keyboard (input), Monitor (output), Touchscreen (both).例子：鍵盤（輸入）、顯示器（輸出）、觸控螢幕（輸入與輸出）。


Central Processing Unit (CPU): The “brain” of the computer.中央處理器（CPU）：電腦的「大腦」。
Arithmetic and Logic Unit (ALU): Performs binary math operations.算術邏輯單元（ALU）：執行二進位數學運算。
Control Unit (CU): Directs program execution.控制單元（CU）：指導程式執行流程。


Main Memory: Stores data and instructions.主記憶體：儲存資料與指令。


🧪 A CPU simulator in the original notes visualizes the fetch-decode-execute cycle.🧪 原教材中的 CPU 模擬器展示了「提取-解碼-執行」循環。

🧠 What’s in a Computer? | 電腦的組成A CPU consists of several main components:一個 CPU 包含以下主要組件：


Arithmetic Logic Unit (ALU): Performs arithmetic and logical operations.算術邏輯單元（ALU）：執行算術和邏輯運算。
Control Unit (CU): Directs processor operations.控制單元（CU）：指導處理器的操作。
Registers: Small, fast storage locations for temporary data and instructions.暫存器：用於暫時儲存資料和指令的小型高速儲存區。

🗂️ Memory Types | 記憶體類型
RAM (Random Access Memory): Volatile; holds data during execution.RAM（隨機存取記憶體）：揮發性；執行期間儲存資料。
Subtypes: SRAM (fast), DRAM (cheap).子類型：SRAM（快速）、DRAM（便宜）。


ROM (Read-Only Memory): Non-volatile; stores boot essentials.ROM（唯讀記憶體）：非揮發性；儲存開機所需資料。
Subtypes: PROM, EPROM, EEPROM.子類型：PROM、EPROM、EEPROM。



🧑‍💻 What is Programming? | 什麼是編程？Programming is the process of writing instructions for computers to perform tasks.編程是撰寫指令讓電腦執行特定任務的過程。
It’s like giving step-by-step directions in a language the computer understands.就像用電腦能理解的語言提供逐步指示。
🔣 Programming Languages | 編程語言Computers use binary (0s and 1s) for data and instructions.電腦使用 二進位（0 和 1） 來表示資料與指令。

Example: Intel CPU addition → 00000011 00000100例子：Intel CPU 加法 → 00000011 00000100
Why Binary? Reliable for electronic circuits (on/off states).為什麼使用二進位？因為電子電路的開/關狀態非常可靠。

🕰️ Historical Note | 歷史小知識
ENIAC (1940s): First electronic computer.ENIAC（1940年代）：第一台電子電腦。
Used switches and inefficient decimal representation (10 bits = 1024 values).使用開關並以低效方式表示十進位數字（10 位元 = 1024 種可能）。



📏 Standards for Representation | 資料表示標準
ASCII: 8-bit codes for English characters (A = 01000001)ASCII：8 位元英文字元編碼（如 ‘A’ = 01000001）
Unicode: Supports global languages (e.g., Chinese, Japanese)Unicode：支援全球語言（如中文、日文）
Numbers:  
2’s complement for negatives負數使用二的補數  
IEEE floating-point for decimals小數使用 IEEE 浮點格式



🧬 Generations of Programming Languages | 編程語言世代



Generation
Description
Example




1st
Machine Language (binary)
10101010


第一代
機器語言（二進位）
10101010


2nd
Assembly Language (mnemonics)
ADD, SUB


第二代
組合語言（助記符）
ADD, SUB


3rd
High-Level Languages
Python, Java, C++


第三代
高階語言（人類可讀）
Python, Java, C++





🧠 Assembly is still useful for microprocessors. A simulator demo compares assembly vs. high-level code.🧠 組合語言仍適用於微處理器等高效率場景。教材中有模擬器展示組合語言與高階語言的比較。

🐍 Introduction to Python | Python 語言簡介Python is chosen for its:選擇 Python 的原因：

Expressiveness: Write less, do more.表達力強：少量程式碼即可完成任務。
Popularity: Rich libraries (math, AI, graphics).廣泛使用：擁有大量函式庫（數學、AI、圖形等）。
Free &amp; Open-Source: No restrictions.免費且開源：無使用限制。
Portability: Runs on multiple platforms.可移植性高：跨平台執行無需修改。

🧪 Sample Python Program | Python 範例程式碼import datetime  # library to obtain current yearcohort = input(&quot;In which year did you join CityU? [e.g., 2020]&quot;)year = datetime.datetime.now().year - int(cohort) + 1print(&quot;So you are a year&quot;, year, &quot;student.&quot;)
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CS1302</tag>
        <tag>CityU</tag>
        <tag>Beginner</tag>
      </tags>
  </entry>
  <entry>
    <title>Test 01</title>
    <url>/posts/fe3551ce.html</url>
    <content><![CDATA[Welcome to my blog!This is my first post using Hexo and the Butterfly theme.
Why I started this blog
To share my journey of self-improvement
To document what I learn about technology
To connect with like-minded people

def hello():    print(&quot;Hello, Hexo + Butterfly !&quot;)
Output:Hello, Hexo + Butterfly + Python!Stay tuned for more updates!
]]></content>
      <categories>
        <category>Test</category>
      </categories>
      <tags>
        <tag>introduction</tag>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title>常用Python程式碼片段集合</title>
    <url>/posts/a4367020.html</url>
    <content><![CDATA[Switch to English Version 🇬🇧
常用Python程式碼片段集合本文提供了一份精心挑選的常用Python程式碼片段列表，涵蓋基本操作、資料結構、檔案處理等內容。每個片段都附有簡要說明及執行結果，可直接使用或根據您的專案需求進行調整。無論您是初學者還是經驗豐富的開發者，這些範例都將是一個方便的參考。
1. 你好，世界！經典的“你好，世界！”程式，幫助您開始使用Python。
print(&quot;你好，世界！&quot;)
說明：print() 函數將文字輸出到控制台。這通常是測試Python環境設置的第一個程式。
執行結果：你好，世界！
2. 列表操作列表是Python中最通用的資料結構之一。以下是如何創建、添加和遍歷列表的範例。# 創建列表fruits = [&quot;蘋果&quot;, &quot;香蕉&quot;, &quot;橙子&quot;]# 添加項fruits.append(&quot;葡萄&quot;)# 遍歷列表for fruit in fruits:    print(f&quot;水果：&#123;fruit&#125;&quot;)說明：列表是有序、可變的集合。append() 方法將項添加到列表末尾，for 迴圈用於遍歷每個元素。
執行結果：水果：蘋果水果：香蕉水果：橙子水果：葡萄

3. 字典操作字典用於儲存鍵值對。此片段展示如何創建、訪問和更新字典。
# 創建字典person = &#123;&quot;姓名&quot;: &quot;Alice&quot;, &quot;年齡&quot;: 25, &quot;城市&quot;: &quot;紐約&quot;&#125;# 訪問值print(person[&quot;姓名&quot;])  #輸出：Alice# 更新值person[&quot;年齡&quot;] = 26# 添加新的鍵值對person[&quot;職業&quot;] = &quot;工程師&quot;# 遍歷鍵和值for key, value in person.items():    print(f&quot;&#123;key&#125;: &#123;value&#125;&quot;)
說明：字典是可變的，支持基於鍵的快速訪問。使用 items() 方法遍歷鍵值對。

4. 檔案讀寫在Python中，讀寫檔案是常見任務。
# 寫入檔案with open(&quot;example.txt&quot;, &quot;w&quot;) as file:    file.write(&quot;你好，這是一個測試檔案！\n&quot;)    file.write(&quot;第二行。&quot;)# 读取文件with open(&quot;example.txt&quot;, &quot;r&quot;) as file:    content = file.read()    print(content)
說明：with 語句確保檔案使用後正確關閉。&quot;w&quot; 模式用於寫入，&quot;r&quot; 模式用於讀取。
執行結果：```text你好，這是一個測試檔案！第二行。---## 5. 列表推導式列表推導式提供了一種簡潔的方式，基於現有可迭代物件創建列表。```python# 創建1到5的平方列表squares = [x**2 for x in range(1, 6)]print(squares)  # 輸出：[1, 4, 9, 16, 25]# 篩選偶數evens = [x for x in range(10) if x % 2 == 0]print(evens)  # 輸出：[0, 2, 4, 6, 8]
說明：列表推導式將迴圈和條件語句合併成一行，提高可讀性和效率。
執行結果：```text[1, 4, 9, 16, 25][0, 2, 4, 6, 8]---## 6. 函數定義函數幫助將程式碼組織成可重用的塊。```pythondef calculate_area(length, width):    &quot;&quot;&quot;計算矩形面積。&quot;&quot;&quot;    return length * width# 調用函數area = calculate_area(5, 3)print(f&quot;面積&#123;area&#125;&quot;)  # 輸出：面積：15
說明：def 關鍵字定義函數。文件字串（&quot;&quot;&quot;...&quot;&quot;&quot;）描述函數用途，return 輸出結果。
執行結果：```text
面積：15---## 7. 異常處理使用 try-except 塊優雅地處理錯誤。```pythontry:    num = int(input(&quot;請輸入一個數字：&quot;))    result = 10 / num    print(f&quot;結果：&#123;result&#125;&quot;)except ZeroDivisionError:    print(&quot;錯誤：不能除以零！&quot;)except ValueError:    print(&quot;錯誤：請輸入有效數字！&quot;)
說明：try 塊運行可能引發錯誤的程式碼。except 塊處理特定異常，防止程式崩潰。
執行結果（假設輸入為 2）：執行結果：```text請輸入一個數字：2結果：5.0---## 8. 集合操作集合用於儲存唯一項並執行集合操作。```python# 創建集合numbers = &#123;1, 2, 2, 3, 4&#125;  # 自動移除重複項print(numbers)  #輸出：&#123;1, 2, 3, 4&#125;# 集合操作other_numbers = &#123;3, 4, 5, 6&#125;union = numbers | other_numbersintersection = numbers &amp; other_numbersprint(f&quot;並集：&#123;union&#125;&quot;)  #輸出：並集：&#123;1, 2, 3, 4, 5, 6&#125;print(f&quot;交集：&#123;intersection&#125;&quot;)  #輸出：交集：&#123;3, 4&#125;
說明：集合自動移除重複項。運算符如 |（並集）和 &amp;（交集）執行集合操作。
執行結果：&#123;1, 2, 3, 4&#125;並集：&#123;1, 2, 3, 4, 5, 6&#125;交集：&#123;3, 4&#125;

9. 字串操作Python 提供強大的字串處理工具。
text = &quot;  你好，Python！  &quot;# 去除空格cleaned = text.strip()print(cleaned)  #輸出：你好，Python！# 分割成單詞words = cleaned.split()print(words)  #輸出：[&#x27;你好，&#x27;, &#x27;Python！&#x27;]# 連接單詞joined = &quot;-&quot;.join(words)print(joined)  #輸出：你好，-Python！
說明：strip()、split() 和 join() 方法使字串處理變得簡單。

10. Lambda 函數Lambda 函數是匿名的單表達式函數，適合快速操作。
# 定義 lambda 函數square = lambda x: x**2print(square(5))  #輸出：25# 配合 sorted() 使用points = [(1, 2), (3, 1), (2, 3)]sorted_points = sorted(points, key=lambda x: x[1])print(sorted_points)  #輸出：[(3, 1), (1, 2), (2, 3)]
說明：Lambda 函數是常規函數的簡潔替代，常用于 sorted() 或 map() 等函數。

11. 日期處理datetime 模組幫助處理日期和時間。
from datetime import datetime, timedelta# 當前日期和時間now = datetime.now()print(f&quot;當前時間：&#123;now&#125;&quot;)# 添加3天future = now + timedelta(days=3)print(f&quot;三天後：&#123;future&#125;&quot;)
說明：datetime 模組提供日期和時間操作的類。timedelta 用於日期算術運算。
執行結果（假設當前時間為 2025-08-30 17:31:05）：當前時間：2025-08-30 17:31:05.123456三天後：2025-09-02 17:31:05.123456

12. 列表切片切片允許您提取列表（或其他序列）的部分內容。
numbers = [0, 1, 2, 3, 4, 5]# 獲取前三個元素first_three = numbers[:3]print(first_three)  #輸出：[0, 1, 2]# 獲取每隔一個元素every_second = numbers[::2]print(every_second)  #輸出：[0, 2, 4]
說明：[start:end:step] 語法提取列表的一部分。省略 start 或 end 使用列表的邊界。
執行結果：[0, 1, 2][0, 2, 4]

結論這些Python程式碼片段涵蓋了常見任務，展示了Python的簡單性和強大功能。它們可以作為您專案的起點或編碼時的快速參考。Python的可讀性和靈活性使其成為初學者和高級開發者的理想選擇。快樂編碼！

發布於 
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CS1302</tag>
        <tag>CityU</tag>
        <tag>Beginner</tag>
        <tag>AI generate</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Basic</title>
    <url>/posts/98acdb98.html</url>
    <content><![CDATA[
  切换到中文版本 🇨🇳


A Collection of Common Python Code SnippetsThis blog post provides a curated list of commonly used Python code snippets, covering basic operations, data structures, file handling, and more. Each snippet includes a brief explanation and is ready to use or adapt for your projects. Whether you’re a beginner or an experienced developer, these examples will serve as a handy reference.
1. Hello WorldThe classic “Hello, World!” program to get started with Python.
print(&quot;Hello, World!&quot;)
Explanation: The print() function outputs text to the console. This is often the first program written to test Python’s setup.

2. Working with ListsLists are one of Python’s most versatile data structures. Here’s how to create, append, and iterate over a list.
# Create a listfruits = [&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;]# Append an itemfruits.append(&quot;grape&quot;)# Iterate over the listfor fruit in fruits:    print(f&quot;Fruit: &#123;fruit&#125;&quot;)
Explanation: Lists are ordered, mutable collections. The append() method adds an item to the end, and a for loop iterates over each element.

3. Dictionary OperationsDictionaries store key-value pairs. This snippet shows how to create, access, and update a dictionary.
# Create a dictionaryperson = &#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 25, &quot;city&quot;: &quot;New York&quot;&#125;# Access a valueprint(person[&quot;name&quot;])  # Output: Alice# Update a valueperson[&quot;age&quot;] = 26# Add a new key-value pairperson[&quot;job&quot;] = &quot;Engineer&quot;# Iterate over keys and valuesfor key, value in person.items():    print(f&quot;&#123;key&#125;: &#123;value&#125;&quot;)
Explanation: Dictionaries are mutable and allow fast key-based access. Use items() to iterate over key-value pairs.

4. File Reading and WritingReading from and writing to files is a common task in Python.
# Write to a filewith open(&quot;example.txt&quot;, &quot;w&quot;) as file:    file.write(&quot;Hello, this is a test file!\n&quot;)    file.write(&quot;Second line.&quot;)# Read from a filewith open(&quot;example.txt&quot;, &quot;r&quot;) as file:    content = file.read()    print(content)
Explanation: The with statement ensures the file is properly closed after use. Mode &quot;w&quot; is for writing, and &quot;r&quot; is for reading.

5. List ComprehensionList comprehensions provide a concise way to create lists based on existing iterables.
# Create a list of squares for numbers 1 to 5squares = [x**2 for x in range(1, 6)]print(squares)  # Output: [1, 4, 9, 16, 25]# Filter even numbersevens = [x for x in range(10) if x % 2 == 0]print(evens)  # Output: [0, 2, 4, 6, 8]
Explanation: List comprehensions combine loops and conditionals into a single line, improving readability and efficiency.

6. Function DefinitionFunctions help organize code into reusable blocks.
def calculate_area(length, width):    &quot;&quot;&quot;Calculate the area of a rectangle.&quot;&quot;&quot;    return length * width# Call the functionarea = calculate_area(5, 3)print(f&quot;Area: &#123;area&#125;&quot;)  # Output: Area: 15
Explanation: The def keyword defines a function. The docstring (&quot;&quot;&quot;...&quot;&quot;&quot;) describes its purpose, and return outputs the result.

7. Exception HandlingHandle errors gracefully with try-except blocks.
try:    num = int(input(&quot;Enter a number: &quot;))    result = 10 / num    print(f&quot;Result: &#123;result&#125;&quot;)except ZeroDivisionError:    print(&quot;Error: Cannot divide by zero!&quot;)except ValueError:    print(&quot;Error: Please enter a valid number!&quot;)
Explanation: The try block runs code that might raise an error. except blocks handle specific exceptions, preventing the program from crashing.

8. Working with SetsSets are useful for storing unique items and performing set operations.
# Create a setnumbers = &#123;1, 2, 2, 3, 4&#125;  # Duplicates are removedprint(numbers)  # Output: &#123;1, 2, 3, 4&#125;# Set operationsother_numbers = &#123;3, 4, 5, 6&#125;union = numbers | other_numbersintersection = numbers &amp; other_numbersprint(f&quot;Union: &#123;union&#125;&quot;)  # Output: Union: &#123;1, 2, 3, 4, 5, 6&#125;print(f&quot;Intersection: &#123;intersection&#125;&quot;)  # Output: Intersection: &#123;3, 4&#125;
Explanation: Sets automatically remove duplicates. Operators like | (union) and &amp; (intersection) perform set operations.

9. String ManipulationPython offers powerful string manipulation tools.
text = &quot;  Hello, Python!  &quot;# Strip whitespacecleaned = text.strip()print(cleaned)  # Output: Hello, Python!# Split into wordswords = cleaned.split()print(words)  # Output: [&#x27;Hello,&#x27;, &#x27;Python!&#x27;]# Join wordsjoined = &quot;-&quot;.join(words)print(joined)  # Output: Hello,-Python!
Explanation: Methods like strip(), split(), and join() make string processing straightforward.

10. Lambda FunctionsLambda functions are anonymous, single-expression functions for quick operations.
# Define a lambda functionsquare = lambda x: x**2print(square(5))  # Output: 25# Use with sorted()points = [(1, 2), (3, 1), (2, 3)]sorted_points = sorted(points, key=lambda x: x[1])print(sorted_points)  # Output: [(3, 1), (1, 2), (2, 3)]
Explanation: Lambda functions are concise alternatives to regular functions, often used with functions like sorted() or map().

11. Working with DatesThe datetime module helps handle dates and times.
from datetime import datetime, timedelta# Current date and timenow = datetime.now()print(f&quot;Current time: &#123;now&#125;&quot;)# Add 3 daysfuture = now + timedelta(days=3)print(f&quot;Three days later: &#123;future&#125;&quot;)
Explanation: The datetime module provides classes for date and time manipulation. timedelta is used for arithmetic with dates.

12. List SlicingSlicing allows you to extract parts of a list (or other sequences).
numbers = [0, 1, 2, 3, 4, 5]# Get first three elementsfirst_three = numbers[:3]print(first_three)  # Output: [0, 1, 2]# Get every second elementevery_second = numbers[::2]print(every_second)  # Output: [0, 2, 4]
Explanation: The syntax [start:end:step] extracts a portion of a list. Omitting start or end uses the list’s boundaries.

ConclusionThese Python snippets cover common tasks and demonstrate Python’s simplicity and power. Use them as a starting point for your projects or as a quick reference when coding. Python’s readability and flexibility make it ideal for both beginners and advanced developers. Happy coding!
]]></content>
      <categories>
        <category>Programming</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CS1302</tag>
        <tag>CityU</tag>
        <tag>Beginner</tag>
        <tag>AI generate</tag>
      </tags>
  </entry>
</search>
