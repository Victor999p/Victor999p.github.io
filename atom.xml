<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一個在成長路上前行的人</title>
  
  <subtitle>真正的成長，不是超越他人，而是超越昨日的自己</subtitle>
  <link href="https://victor999p.github.io/atom.xml" rel="self"/>
  
  <link href="https://victor999p.github.io/"/>
  <updated>2025-09-02T17:41:10.285Z</updated>
  <id>https://victor999p.github.io/</id>
  
  <author>
    <name>Victor999p</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Test 01</title>
    <link href="https://victor999p.github.io/posts/fe3551ce.html"/>
    <id>https://victor999p.github.io/posts/fe3551ce.html</id>
    <published>2025-09-02T17:32:00.000Z</published>
    <updated>2025-09-02T17:41:10.285Z</updated>
    
    <content type="html"><![CDATA[<p>change?</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;change?&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Test" scheme="https://victor999p.github.io/categories/Test/"/>
    
    
    <category term="introduction" scheme="https://victor999p.github.io/tags/introduction/"/>
    
    <category term="first" scheme="https://victor999p.github.io/tags/first/"/>
    
  </entry>
  
  <entry>
    <title>常用Python程式碼片段集合</title>
    <link href="https://victor999p.github.io/posts/a4367020.html"/>
    <id>https://victor999p.github.io/posts/a4367020.html</id>
    <published>2025-08-30T09:31:05.000Z</published>
    <updated>2025-09-02T17:41:10.285Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/posts/98acdb98.html" class="lang-switch">Switch to English Version 🇬🇧</a></p><h1 id="常用Python程式碼片段集合"><a href="#常用Python程式碼片段集合" class="headerlink" title="常用Python程式碼片段集合"></a>常用Python程式碼片段集合</h1><p>本文提供了一份精心挑選的常用Python程式碼片段列表，涵蓋基本操作、資料結構、檔案處理等內容。每個片段都附有簡要說明及執行結果，可直接使用或根據您的專案需求進行調整。無論您是初學者還是經驗豐富的開發者，這些範例都將是一個方便的參考。</p><h2 id="1-你好，世界！"><a href="#1-你好，世界！" class="headerlink" title="1. 你好，世界！"></a>1. 你好，世界！</h2><p>經典的“你好，世界！”程式，幫助您開始使用Python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，世界！&quot;</span>)</span><br></pre></td></tr></table></figure><p>說明：<code>print()</code> 函數將文字輸出到控制台。這通常是測試Python環境設置的第一個程式。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，世界！</span><br></pre></td></tr></table></figure></p><h2 id="2-列表操作"><a href="#2-列表操作" class="headerlink" title="2. 列表操作"></a>2. 列表操作</h2><p>列表是Python中最通用的資料結構之一。以下是如何創建、添加和遍歷列表的範例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 創建列表</span></span><br><span class="line">fruits = [<span class="string">&quot;蘋果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橙子&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加項</span></span><br><span class="line">fruits.append(<span class="string">&quot;葡萄&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷列表</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;水果：<span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>說明：列表是有序、可變的集合。<code>append()</code> 方法將項添加到列表末尾，<code>for</code> 迴圈用於遍歷每個元素。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">水果：蘋果</span><br><span class="line">水果：香蕉</span><br><span class="line">水果：橙子</span><br><span class="line">水果：葡萄</span><br></pre></td></tr></table></figure></p><hr><h2 id="3-字典操作"><a href="#3-字典操作" class="headerlink" title="3. 字典操作"></a>3. 字典操作</h2><p>字典用於儲存鍵值對。此片段展示如何創建、訪問和更新字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 創建字典</span></span><br><span class="line">person = &#123;<span class="string">&quot;姓名&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;年齡&quot;</span>: <span class="number">25</span>, <span class="string">&quot;城市&quot;</span>: <span class="string">&quot;紐約&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 訪問值</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;姓名&quot;</span>])  <span class="comment">#輸出：Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新值</span></span><br><span class="line">person[<span class="string">&quot;年齡&quot;</span>] = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的鍵值對</span></span><br><span class="line">person[<span class="string">&quot;職業&quot;</span>] = <span class="string">&quot;工程師&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷鍵和值</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：字典是可變的，支持基於鍵的快速訪問。使用 <code>items()</code> 方法遍歷鍵值對。</p><hr><h2 id="4-檔案讀寫"><a href="#4-檔案讀寫" class="headerlink" title="4. 檔案讀寫"></a>4. 檔案讀寫</h2><p>在Python中，讀寫檔案是常見任務。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寫入檔案</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;你好，這是一個測試檔案！\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;第二行。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>with</code> 語句確保檔案使用後正確關閉。<code>&quot;w&quot;</code> 模式用於寫入，<code>&quot;r&quot;</code> 模式用於讀取。</p><p>執行結果：```text<br>你好，這是一個測試檔案！<br>第二行。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">## 5. 列表推導式</span><br><span class="line">列表推導式提供了一種簡潔的方式，基於現有可迭代物件創建列表。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 創建1到5的平方列表</span><br><span class="line">squares = [x**2 for x in range(1, 6)]</span><br><span class="line">print(squares)  # 輸出：[1, 4, 9, 16, 25]</span><br><span class="line"></span><br><span class="line"># 篩選偶數</span><br><span class="line">evens = [x for x in range(10) if x % 2 == 0]</span><br><span class="line">print(evens)  # 輸出：[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：列表推導式將迴圈和條件語句合併成一行，提高可讀性和效率。</p><p>執行結果：```text<br>[1, 4, 9, 16, 25]<br>[0, 2, 4, 6, 8]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 6. 函數定義</span><br><span class="line">函數幫助將程式碼組織成可重用的塊。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def calculate_area(length, width):</span><br><span class="line">    &quot;&quot;&quot;計算矩形面積。&quot;&quot;&quot;</span><br><span class="line">    return length * width</span><br><span class="line"></span><br><span class="line"># 調用函數</span><br><span class="line">area = calculate_area(5, 3)</span><br><span class="line">print(f&quot;面積&#123;area&#125;&quot;)  # 輸出：面積：15</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：<code>def</code> 關鍵字定義函數。文件字串（<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>）描述函數用途，<code>return</code> 輸出結果。</p><p>執行結果：```text</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">面積：15</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 7. 異常處理</span><br><span class="line">使用 try-except 塊優雅地處理錯誤。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">try:</span><br><span class="line">    num = int(input(&quot;請輸入一個數字：&quot;))</span><br><span class="line">    result = 10 / num</span><br><span class="line">    print(f&quot;結果：&#123;result&#125;&quot;)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;錯誤：不能除以零！&quot;)</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;錯誤：請輸入有效數字！&quot;)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>try</code> 塊運行可能引發錯誤的程式碼。<code>except</code> 塊處理特定異常，防止程式崩潰。</p><p>執行結果（假設輸入為 2）：<br>執行結果：```text<br>請輸入一個數字：2<br>結果：5.0<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 8. 集合操作</span><br><span class="line">集合用於儲存唯一項並執行集合操作。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 創建集合</span><br><span class="line">numbers = &#123;1, 2, 2, 3, 4&#125;  # 自動移除重複項</span><br><span class="line">print(numbers)  #輸出：&#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line"># 集合操作</span><br><span class="line">other_numbers = &#123;3, 4, 5, 6&#125;</span><br><span class="line">union = numbers | other_numbers</span><br><span class="line">intersection = numbers &amp; other_numbers</span><br><span class="line">print(f&quot;並集：&#123;union&#125;&quot;)  #輸出：並集：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">print(f&quot;交集：&#123;intersection&#125;&quot;)  #輸出：交集：&#123;3, 4&#125;</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：集合自動移除重複項。運算符如 <code>|</code>（並集）和 <code>&amp;</code>（交集）執行集合操作。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">並集：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">交集：&#123;3, 4&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="9-字串操作"><a href="#9-字串操作" class="headerlink" title="9. 字串操作"></a>9. 字串操作</h2><p>Python 提供強大的字串處理工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;  你好，Python！  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除空格</span></span><br><span class="line">cleaned = text.strip()</span><br><span class="line"><span class="built_in">print</span>(cleaned)  <span class="comment">#輸出：你好，Python！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割成單詞</span></span><br><span class="line">words = cleaned.split()</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment">#輸出：[&#x27;你好，&#x27;, &#x27;Python！&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 連接單詞</span></span><br><span class="line">joined = <span class="string">&quot;-&quot;</span>.join(words)</span><br><span class="line"><span class="built_in">print</span>(joined)  <span class="comment">#輸出：你好，-Python！</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>strip()</code>、<code>split()</code> 和 <code>join()</code> 方法使字串處理變得簡單。</p><hr><h2 id="10-Lambda-函數"><a href="#10-Lambda-函數" class="headerlink" title="10. Lambda 函數"></a>10. Lambda 函數</h2><p>Lambda 函數是匿名的單表達式函數，適合快速操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定義 lambda 函數</span></span><br><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">5</span>))  <span class="comment">#輸出：25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合 sorted() 使用</span></span><br><span class="line">points = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line">sorted_points = <span class="built_in">sorted</span>(points, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_points)  <span class="comment">#輸出：[(3, 1), (1, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：Lambda 函數是常規函數的簡潔替代，常用于 <code>sorted()</code> 或 <code>map()</code> 等函數。</p><hr><h2 id="11-日期處理"><a href="#11-日期處理" class="headerlink" title="11. 日期處理"></a>11. 日期處理</h2><p><code>datetime</code> 模組幫助處理日期和時間。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 當前日期和時間</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;當前時間：<span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加3天</span></span><br><span class="line">future = now + timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;三天後：<span class="subst">&#123;future&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>datetime</code> 模組提供日期和時間操作的類。<code>timedelta</code> 用於日期算術運算。</p><p>執行結果（假設當前時間為 2025-08-30 17:31:05）：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">當前時間：2025-08-30 17:31:05.123456</span><br><span class="line">三天後：2025-09-02 17:31:05.123456</span><br></pre></td></tr></table></figure></p><hr><h2 id="12-列表切片"><a href="#12-列表切片" class="headerlink" title="12. 列表切片"></a>12. 列表切片</h2><p>切片允許您提取列表（或其他序列）的部分內容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取前三個元素</span></span><br><span class="line">first_three = numbers[:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(first_three)  <span class="comment">#輸出：[0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取每隔一個元素</span></span><br><span class="line">every_second = numbers[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(every_second)  <span class="comment">#輸出：[0, 2, 4]</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>[start:end:step]</code> 語法提取列表的一部分。省略 <code>start</code> 或 <code>end</code> 使用列表的邊界。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2]</span><br><span class="line">[0, 2, 4]</span><br></pre></td></tr></table></figure></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這些Python程式碼片段涵蓋了常見任務，展示了Python的簡單性和強大功能。它們可以作為您專案的起點或編碼時的快速參考。Python的可讀性和靈活性使其成為初學者和高級開發者的理想選擇。快樂編碼！</p><hr><p>發布於 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/posts/98acdb98.html&quot; class=&quot;lang-switch&quot;&gt;Switch to English Version 🇬🇧&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;常用Python程式碼片段集合&quot;&gt;&lt;a href=&quot;#常用Python程式碼片</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
    <category term="AI generate" scheme="https://victor999p.github.io/tags/AI-generate/"/>
    
  </entry>
  
  <entry>
    <title>Python Basic</title>
    <link href="https://victor999p.github.io/posts/98acdb98.html"/>
    <id>https://victor999p.github.io/posts/98acdb98.html</id>
    <published>2025-08-30T09:18:00.000Z</published>
    <updated>2025-09-02T17:41:10.285Z</updated>
    
    <content type="html"><![CDATA[<div class="lang-switch">  <a href="/posts/a4367020.html" class="btn btn--primary">切换到中文版本 🇨🇳</a></div><h1 id="A-Collection-of-Common-Python-Code-Snippets"><a href="#A-Collection-of-Common-Python-Code-Snippets" class="headerlink" title="A Collection of Common Python Code Snippets"></a>A Collection of Common Python Code Snippets</h1><p>This blog post provides a curated list of commonly used Python code snippets, covering basic operations, data structures, file handling, and more. Each snippet includes a brief explanation and is ready to use or adapt for your projects. Whether you’re a beginner or an experienced developer, these examples will serve as a handy reference.</p><h2 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h2><p>The classic “Hello, World!” program to get started with Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>print()</code> function outputs text to the console. This is often the first program written to test Python’s setup.</p><hr><h2 id="2-Working-with-Lists"><a href="#2-Working-with-Lists" class="headerlink" title="2. Working with Lists"></a>2. Working with Lists</h2><p>Lists are one of Python’s most versatile data structures. Here’s how to create, append, and iterate over a list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a list</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Append an item</span></span><br><span class="line">fruits.append(<span class="string">&quot;grape&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterate over the list</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fruit: <span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Lists are ordered, mutable collections. The <code>append()</code> method adds an item to the end, and a <code>for</code> loop iterates over each element.</p><hr><h2 id="3-Dictionary-Operations"><a href="#3-Dictionary-Operations" class="headerlink" title="3. Dictionary Operations"></a>3. Dictionary Operations</h2><p>Dictionaries store key-value pairs. This snippet shows how to create, access, and update a dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a dictionary</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access a value</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])  <span class="comment"># Output: Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update a value</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a new key-value pair</span></span><br><span class="line">person[<span class="string">&quot;job&quot;</span>] = <span class="string">&quot;Engineer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterate over keys and values</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Dictionaries are mutable and allow fast key-based access. Use <code>items()</code> to iterate over key-value pairs.</p><hr><h2 id="4-File-Reading-and-Writing"><a href="#4-File-Reading-and-Writing" class="headerlink" title="4. File Reading and Writing"></a>4. File Reading and Writing</h2><p>Reading from and writing to files is a common task in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write to a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;Hello, this is a test file!\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;Second line.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read from a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>with</code> statement ensures the file is properly closed after use. Mode <code>&quot;w&quot;</code> is for writing, and <code>&quot;r&quot;</code> is for reading.</p><hr><h2 id="5-List-Comprehension"><a href="#5-List-Comprehension" class="headerlink" title="5. List Comprehension"></a>5. List Comprehension</h2><p>List comprehensions provide a concise way to create lists based on existing iterables.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a list of squares for numbers 1 to 5</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># Output: [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter even numbers</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(evens)  <span class="comment"># Output: [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: List comprehensions combine loops and conditionals into a single line, improving readability and efficiency.</p><hr><h2 id="6-Function-Definition"><a href="#6-Function-Definition" class="headerlink" title="6. Function Definition"></a>6. Function Definition</h2><p>Functions help organize code into reusable blocks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_area</span>(<span class="params">length, width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate the area of a rectangle.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> length * width</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call the function</span></span><br><span class="line">area = calculate_area(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Area: <span class="subst">&#123;area&#125;</span>&quot;</span>)  <span class="comment"># Output: Area: 15</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>def</code> keyword defines a function. The docstring (<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>) describes its purpose, and <code>return</code> outputs the result.</p><hr><h2 id="7-Exception-Handling"><a href="#7-Exception-Handling" class="headerlink" title="7. Exception Handling"></a>7. Exception Handling</h2><p>Handle errors gracefully with try-except blocks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">    result = <span class="number">10</span> / num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: Cannot divide by zero!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: Please enter a valid number!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>try</code> block runs code that might raise an error. <code>except</code> blocks handle specific exceptions, preventing the program from crashing.</p><hr><h2 id="8-Working-with-Sets"><a href="#8-Working-with-Sets" class="headerlink" title="8. Working with Sets"></a>8. Working with Sets</h2><p>Sets are useful for storing unique items and performing set operations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a set</span></span><br><span class="line">numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment"># Duplicates are removed</span></span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># Output: &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set operations</span></span><br><span class="line">other_numbers = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">union = numbers | other_numbers</span><br><span class="line">intersection = numbers &amp; other_numbers</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Union: <span class="subst">&#123;union&#125;</span>&quot;</span>)  <span class="comment"># Output: Union: &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Intersection: <span class="subst">&#123;intersection&#125;</span>&quot;</span>)  <span class="comment"># Output: Intersection: &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Sets automatically remove duplicates. Operators like <code>|</code> (union) and <code>&amp;</code> (intersection) perform set operations.</p><hr><h2 id="9-String-Manipulation"><a href="#9-String-Manipulation" class="headerlink" title="9. String Manipulation"></a>9. String Manipulation</h2><p>Python offers powerful string manipulation tools.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;  Hello, Python!  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Strip whitespace</span></span><br><span class="line">cleaned = text.strip()</span><br><span class="line"><span class="built_in">print</span>(cleaned)  <span class="comment"># Output: Hello, Python!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Split into words</span></span><br><span class="line">words = cleaned.split()</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># Output: [&#x27;Hello,&#x27;, &#x27;Python!&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Join words</span></span><br><span class="line">joined = <span class="string">&quot;-&quot;</span>.join(words)</span><br><span class="line"><span class="built_in">print</span>(joined)  <span class="comment"># Output: Hello,-Python!</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Methods like <code>strip()</code>, <code>split()</code>, and <code>join()</code> make string processing straightforward.</p><hr><h2 id="10-Lambda-Functions"><a href="#10-Lambda-Functions" class="headerlink" title="10. Lambda Functions"></a>10. Lambda Functions</h2><p>Lambda functions are anonymous, single-expression functions for quick operations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define a lambda function</span></span><br><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">5</span>))  <span class="comment"># Output: 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use with sorted()</span></span><br><span class="line">points = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line">sorted_points = <span class="built_in">sorted</span>(points, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_points)  <span class="comment"># Output: [(3, 1), (1, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Lambda functions are concise alternatives to regular functions, often used with functions like <code>sorted()</code> or <code>map()</code>.</p><hr><h2 id="11-Working-with-Dates"><a href="#11-Working-with-Dates" class="headerlink" title="11. Working with Dates"></a>11. Working with Dates</h2><p>The <code>datetime</code> module helps handle dates and times.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># Current date and time</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Current time: <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add 3 days</span></span><br><span class="line">future = now + timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Three days later: <span class="subst">&#123;future&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>datetime</code> module provides classes for date and time manipulation. <code>timedelta</code> is used for arithmetic with dates.</p><hr><h2 id="12-List-Slicing"><a href="#12-List-Slicing" class="headerlink" title="12. List Slicing"></a>12. List Slicing</h2><p>Slicing allows you to extract parts of a list (or other sequences).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get first three elements</span></span><br><span class="line">first_three = numbers[:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(first_three)  <span class="comment"># Output: [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get every second element</span></span><br><span class="line">every_second = numbers[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(every_second)  <span class="comment"># Output: [0, 2, 4]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The syntax <code>[start:end:step]</code> extracts a portion of a list. Omitting <code>start</code> or <code>end</code> uses the list’s boundaries.</p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>These Python snippets cover common tasks and demonstrate Python’s simplicity and power. Use them as a starting point for your projects or as a quick reference when coding. Python’s readability and flexibility make it ideal for both beginners and advanced developers. Happy coding!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;lang-switch&quot;&gt;
  &lt;a href=&quot;/posts/a4367020.html&quot; class=&quot;btn btn--primary&quot;&gt;切换到中文版本 🇨🇳&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;A-Collection-of-Common-</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
    <category term="AI generate" scheme="https://victor999p.github.io/tags/AI-generate/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Computer Programming:A Beginner&#39;s Guide</title>
    <link href="https://victor999p.github.io/posts/6778c1a2.html"/>
    <id>https://victor999p.github.io/posts/6778c1a2.html</id>
    <published>2025-08-30T08:44:00.000Z</published>
    <updated>2025-09-02T17:41:10.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🧠-Overview-概覽"><a href="#🧠-Overview-概覽" class="headerlink" title="🧠 Overview | 概覽"></a>🧠 Overview | 概覽</h2><p>This post summarizes key concepts from the <strong>CS1302: Introduction to Computer Programming</strong> lecture notes from <em>City University of Hong Kong</em>.<br>本文總結了香港城市大學《CS1302：電腦編程入門》課程筆記的重點內容。</p><p>It covers computer fundamentals, programming concepts, and an introduction to Python. Designed for beginners, it explains everything from hardware basics to why Python is a great starting language.<br>內容涵蓋電腦基本原理、編程概念，以及 Python 語言入門。這是一份為初學者設計的指南，從硬件基礎到為什麼 Python 是理想的入門語言都有詳細說明。</p><h2 id="💻-What-is-a-Computer-什麼是電腦？"><a href="#💻-What-is-a-Computer-什麼是電腦？" class="headerlink" title="💻 What is a Computer? | 什麼是電腦？"></a>💻 What is a Computer? | 什麼是電腦？</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Computer_architecture_block_diagram.png/960px-Computer_architecture_block_diagram.png" alt="Computer architecture"></p><p>A computer is more than an advanced calculator—it’s an electronic device that manipulates data and performs arithmetic operations.<br>電腦不僅僅是高級計算機，它是一種能夠處理資料並執行算術操作的電子設備。</p><p>Unlike ancient tools like the <strong>abacus</strong>, modern computers are programmable and versatile.<br>與古老的工具如算盤不同，現代電腦具有可編程性和多功能性。</p><h2 id="🧩-Von-Neumann-Architecture-馮·諾依曼架構"><a href="#🧩-Von-Neumann-Architecture-馮·諾依曼架構" class="headerlink" title="🧩 Von Neumann Architecture | 馮·諾依曼架構"></a>🧩 Von Neumann Architecture | 馮·諾依曼架構</h2><p>Most computers follow the <strong>Von Neumann architecture</strong>, which includes:<br>大多數電腦遵循「馮·諾依曼架構」，包括：</p><ul><li><strong>Input/Output Devices</strong>: Read/write data to/from memory on CPU command.<br><strong>輸入/輸出設備</strong>：根據 CPU 指令讀取或寫入記憶體資料。<ul><li>Examples: Keyboard (input), Monitor (output), Touchscreen (both).<br>例子：鍵盤（輸入）、顯示器（輸出）、觸控螢幕（輸入與輸出）。</li></ul></li><li><strong>Central Processing Unit (CPU)</strong>: The “brain” of the computer.<br><strong>中央處理器（CPU）</strong>：電腦的「大腦」。<ul><li><strong>Arithmetic and Logic Unit (ALU)</strong>: Performs binary math operations.<br><strong>算術邏輯單元（ALU）</strong>：執行二進位數學運算。</li><li><strong>Control Unit (CU)</strong>: Directs program execution.<br><strong>控制單元（CU）</strong>：指導程式執行流程。</li></ul></li><li><strong>Main Memory</strong>: Stores data and instructions.<br><strong>主記憶體</strong>：儲存資料與指令。</li></ul><blockquote><p>🧪 A CPU simulator in the original notes visualizes the fetch-decode-execute cycle.<br>🧪 原教材中的 CPU 模擬器展示了「提取-解碼-執行」循環。</p></blockquote><h2 id="🧠-What’s-in-a-Computer-電腦的組成"><a href="#🧠-What’s-in-a-Computer-電腦的組成" class="headerlink" title="🧠 What’s in a Computer? | 電腦的組成"></a>🧠 What’s in a Computer? | 電腦的組成</h2><p>A CPU consists of several main components:<br>一個 CPU 包含以下主要組件：</p><p><img src="https://www.scientecheasy.com/wp-content/uploads/2023/07/parts-of-cpu.png" alt="CPU Diagram"></p><ul><li>Arithmetic Logic Unit (ALU): Performs arithmetic and logical operations.<br>算術邏輯單元（ALU）：執行算術和邏輯運算。</li><li>Control Unit (CU): Directs processor operations.<br>控制單元（CU）：指導處理器的操作。</li><li>Registers: Small, fast storage locations for temporary data and instructions.<br>暫存器：用於暫時儲存資料和指令的小型高速儲存區。</li></ul><h2 id="🗂️-Memory-Types-記憶體類型"><a href="#🗂️-Memory-Types-記憶體類型" class="headerlink" title="🗂️ Memory Types | 記憶體類型"></a>🗂️ Memory Types | 記憶體類型</h2><ul><li><strong>RAM (Random Access Memory)</strong>: Volatile; holds data during execution.<br><strong>RAM（隨機存取記憶體）</strong>：揮發性；執行期間儲存資料。<ul><li>Subtypes: SRAM (fast), DRAM (cheap).<br>子類型：SRAM（快速）、DRAM（便宜）。</li></ul></li><li><strong>ROM (Read-Only Memory)</strong>: Non-volatile; stores boot essentials.<br><strong>ROM（唯讀記憶體）</strong>：非揮發性；儲存開機所需資料。<ul><li>Subtypes: PROM, EPROM, EEPROM.<br>子類型：PROM、EPROM、EEPROM。</li></ul></li></ul><h2 id="🧑‍💻-What-is-Programming-什麼是編程？"><a href="#🧑‍💻-What-is-Programming-什麼是編程？" class="headerlink" title="🧑‍💻 What is Programming? | 什麼是編程？"></a>🧑‍💻 What is Programming? | 什麼是編程？</h2><p>Programming is the process of writing instructions for computers to perform tasks.<br>編程是撰寫指令讓電腦執行特定任務的過程。</p><p>It’s like giving step-by-step directions in a language the computer understands.<br>就像用電腦能理解的語言提供逐步指示。</p><h2 id="🔣-Programming-Languages-編程語言"><a href="#🔣-Programming-Languages-編程語言" class="headerlink" title="🔣 Programming Languages | 編程語言"></a>🔣 Programming Languages | 編程語言</h2><p>Computers use <strong>binary (0s and 1s)</strong> for data and instructions.<br>電腦使用 <strong>二進位（0 和 1）</strong> 來表示資料與指令。</p><ul><li>Example: Intel CPU addition → <code>00000011 00000100</code><br>例子：Intel CPU 加法 → <code>00000011 00000100</code></li><li>Why Binary? Reliable for electronic circuits (on/off states).<br>為什麼使用二進位？因為電子電路的開/關狀態非常可靠。</li></ul><h3 id="🕰️-Historical-Note-歷史小知識"><a href="#🕰️-Historical-Note-歷史小知識" class="headerlink" title="🕰️ Historical Note | 歷史小知識"></a>🕰️ Historical Note | 歷史小知識</h3><ul><li><strong>ENIAC</strong> (1940s): First electronic computer.<br><strong>ENIAC</strong>（1940年代）：第一台電子電腦。<ul><li>Used switches and inefficient decimal representation (10 bits = 1024 values).<br>使用開關並以低效方式表示十進位數字（10 位元 = 1024 種可能）。</li></ul></li></ul><h3 id="📏-Standards-for-Representation-資料表示標準"><a href="#📏-Standards-for-Representation-資料表示標準" class="headerlink" title="📏 Standards for Representation | 資料表示標準"></a>📏 Standards for Representation | 資料表示標準</h3><ul><li><strong>ASCII</strong>: 8-bit codes for English characters (<code>A</code> = <code>01000001</code>)<br><strong>ASCII</strong>：8 位元英文字元編碼（如 ‘A’ = <code>01000001</code>）</li><li><strong>Unicode</strong>: Supports global languages (e.g., Chinese, Japanese)<br><strong>Unicode</strong>：支援全球語言（如中文、日文）</li><li><strong>Numbers</strong>:  <ul><li>2’s complement for negatives<br>負數使用二的補數  </li><li>IEEE floating-point for decimals<br>小數使用 IEEE 浮點格式</li></ul></li></ul><h2 id="🧬-Generations-of-Programming-Languages-編程語言世代"><a href="#🧬-Generations-of-Programming-Languages-編程語言世代" class="headerlink" title="🧬 Generations of Programming Languages | 編程語言世代"></a>🧬 Generations of Programming Languages | 編程語言世代</h2><div class="table-container"><table><thead><tr><th>Generation</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>1st</td><td>Machine Language (binary)</td><td><code>10101010</code></td></tr><tr><td>第一代</td><td>機器語言（二進位）</td><td><code>10101010</code></td></tr><tr><td>2nd</td><td>Assembly Language (mnemonics)</td><td><code>ADD</code>, <code>SUB</code></td></tr><tr><td>第二代</td><td>組合語言（助記符）</td><td><code>ADD</code>, <code>SUB</code></td></tr><tr><td>3rd</td><td>High-Level Languages</td><td><code>Python</code>, <code>Java</code>, <code>C++</code></td></tr><tr><td>第三代</td><td>高階語言（人類可讀）</td><td><code>Python</code>, <code>Java</code>, <code>C++</code></td></tr></tbody></table></div><blockquote><p>🧠 Assembly is still useful for microprocessors. A simulator demo compares assembly vs. high-level code.<br>🧠 組合語言仍適用於微處理器等高效率場景。教材中有模擬器展示組合語言與高階語言的比較。</p></blockquote><h2 id="🐍-Introduction-to-Python-Python-語言簡介"><a href="#🐍-Introduction-to-Python-Python-語言簡介" class="headerlink" title="🐍 Introduction to Python | Python 語言簡介"></a>🐍 Introduction to Python | Python 語言簡介</h2><p>Python is chosen for its:<br>選擇 Python 的原因：</p><ul><li><strong>Expressiveness</strong>: Write less, do more.<br><strong>表達力強</strong>：少量程式碼即可完成任務。</li><li><strong>Popularity</strong>: Rich libraries (math, AI, graphics).<br><strong>廣泛使用</strong>：擁有大量函式庫（數學、AI、圖形等）。</li><li><strong>Free &amp; Open-Source</strong>: No restrictions.<br><strong>免費且開源</strong>：無使用限制。</li><li><strong>Portability</strong>: Runs on multiple platforms.<br><strong>可移植性高</strong>：跨平台執行無需修改。</li></ul><h3 id="🧪-Sample-Python-Program-Python-範例程式碼"><a href="#🧪-Sample-Python-Program-Python-範例程式碼" class="headerlink" title="🧪 Sample Python Program | Python 範例程式碼"></a>🧪 Sample Python Program | Python 範例程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime  <span class="comment"># library to obtain current year</span></span><br><span class="line"></span><br><span class="line">cohort = <span class="built_in">input</span>(<span class="string">&quot;In which year did you join CityU? [e.g., 2020]&quot;</span>)</span><br><span class="line">year = datetime.datetime.now().year - <span class="built_in">int</span>(cohort) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;So you are a year&quot;</span>, year, <span class="string">&quot;student.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🧠-Overview-概覽&quot;&gt;&lt;a href=&quot;#🧠-Overview-概覽&quot; class=&quot;headerlink&quot; title=&quot;🧠 Overview | 概覽&quot;&gt;&lt;/a&gt;🧠 Overview | 概覽&lt;/h2&gt;&lt;p&gt;This post summariz</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
  </entry>
  
  <entry>
    <title>Test 01</title>
    <link href="https://victor999p.github.io/posts/fe3551ce.html"/>
    <id>https://victor999p.github.io/posts/fe3551ce.html</id>
    <published>2025-08-26T07:33:35.000Z</published>
    <updated>2025-09-02T17:41:10.285Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog!<br>This is my first post using Hexo and the Butterfly theme.</p><h2 id="Why-I-started-this-blog"><a href="#Why-I-started-this-blog" class="headerlink" title="Why I started this blog"></a>Why I started this blog</h2><ul><li>To share my journey of self-improvement</li><li>To document what I learn about technology</li><li>To connect with like-minded people</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, Hexo + Butterfly !&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Hexo + Butterfly + Python!</span><br></pre></td></tr></table></figure><br>Stay tuned for more updates!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to my blog!&lt;br&gt;This is my first post using Hexo and the Butterfly theme.&lt;/p&gt;
&lt;h2 id=&quot;Why-I-started-this-blog&quot;&gt;&lt;a href=&quot;#Why-I-sta</summary>
      
    
    
    
    <category term="Test" scheme="https://victor999p.github.io/categories/Test/"/>
    
    
    <category term="introduction" scheme="https://victor999p.github.io/tags/introduction/"/>
    
    <category term="first" scheme="https://victor999p.github.io/tags/first/"/>
    
  </entry>
  
</feed>
