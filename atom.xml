<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一個在成長路上前行的人</title>
  
  <subtitle>真正的成長，不是超越他人，而是超越昨日的自己</subtitle>
  <link href="https://victor999p.github.io/atom.xml" rel="self"/>
  
  <link href="https://victor999p.github.io/"/>
  <updated>2025-10-01T09:54:21.637Z</updated>
  <id>https://victor999p.github.io/</id>
  
  <author>
    <name>Victor999p</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Biomedical Signals and Systems | 生物信號與生物系統 *UNFINISHED</title>
    <link href="https://victor999p.github.io/posts/6778c1a2.html"/>
    <id>https://victor999p.github.io/posts/6778c1a2.html</id>
    <published>2025-10-01T09:54:21.637Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Introduction-to-Biosignals-and-Biological-Systems-生物信號與生物系統簡介"><a href="#Introduction-to-Biosignals-and-Biological-Systems-生物信號與生物系統簡介" class="headerlink" title="Introduction to Biosignals and Biological Systems | 生物信號與生物系統簡介"></a>Introduction to Biosignals and Biological Systems | 生物信號與生物系統簡介</h1><h2 id="Course-Overview-課程概述"><a href="#Course-Overview-課程概述" class="headerlink" title="Course Overview | 課程概述"></a>Course Overview | 課程概述</h2><p>This course explores <strong>biosignals</strong> and <strong>biological systems</strong>, focusing on their roles in physiological processes, measurement, and analysis. Students will learn how biosignals facilitate communication within biological systems, how these signals are processed, and how tools like MATLAB can be used to simulate signal acquisition and conversion. The course bridges biology, engineering, and data analysis to understand physiological functions and their applications in medicine.<br>本課程探討<strong>生物信號</strong>與<strong>生物系統</strong>，重點在於它們在生理過程、測量和分析中的作用。學生將學習生物信號如何促進生物系統內的通信、這些信號如何被處理，以及如何使用MATLAB等工具模擬信號採集和轉換。本課程結合生物學、工程學和數據分析，以理解生理功能及其在醫學中的應用。</p><h2 id="Learning-Objectives-學習目標"><a href="#Learning-Objectives-學習目標" class="headerlink" title="Learning Objectives | 學習目標"></a>Learning Objectives | 學習目標</h2><ol><li>Define biosignals and biological systems.<br>定義生物信號和生物系統。</li><li>Explain the input-output model in physiological contexts.<br>解釋生理環境中的輸入-輸出模型。</li><li>Differentiate between analog and digital biosignals.<br>區分模擬和數位生物信號。</li><li>Describe the encoding and sampling process of biosignals.<br>描述生物信號的編碼和採樣過程。</li><li>Apply MATLAB to simulate biosignal acquisition and conversion.<br>使用MATLAB模擬生物信號的採集和轉換。</li></ol><h2 id="What-Are-Biological-Systems-什麼是生物系統？"><a href="#What-Are-Biological-Systems-什麼是生物系統？" class="headerlink" title="What Are Biological Systems? | 什麼是生物系統？"></a>What Are Biological Systems? | 什麼是生物系統？</h2><p>A <strong>biological system</strong> is a collection of physiological processes or components that interact to perform a specific function. Examples include:<br><strong>生物系統</strong>是由生理過程或組件相互作用以執行特定功能的集合。示例包括：</p><ul><li><strong>Cardiovascular System</strong>: Delivers oxygenated blood to tissues.<br><strong>心血管系統</strong>：將含氧血液輸送到組織。</li><li><strong>Nervous System</strong>: Transmits electrical signals for communication and control.<br><strong>神經系統</strong>：傳輸電信號以進行通信和控制。</li><li><strong>Endocrine System</strong>: Uses hormones for regulation.<br><strong>內分泌系統</strong>：使用激素進行調節。</li><li><strong>Immune System</strong>: Responds to pathogens with inputs (e.g., antigens) and outputs (e.g., antibodies).<br><strong>免疫系統</strong>：對病原體作出反應，輸入（例如抗原）和輸出（例如抗體）。</li></ul><p><strong>English Discussion Prompt</strong>: How would you classify the immune system in terms of an input-output model?<br><strong>Example</strong>: Inputs (pathogens) → Processing (immune cell signaling) → Outputs (antibody production, inflammation).<br><strong>繁體中文討論提示</strong>：你會如何根據輸入-輸出模型對免疫系統進行分類？<br><strong>示例</strong>：輸入（病原體）→ 處理（免疫細胞信號傳導）→ 輸出（抗體產生、炎症）。</p><h2 id="What-Are-Biosignals-什麼是生物信號？"><a href="#What-Are-Biosignals-什麼是生物信號？" class="headerlink" title="What Are Biosignals? | 什麼是生物信號？"></a>What Are Biosignals? | 什麼是生物信號？</h2><p><strong>Biosignals</strong> are measurable quantities that convey information about the behavior of biological systems. They enable communication between systems and subsystems and are encoded as variations in:<br><strong>生物信號</strong>是傳達生物系統行為信息的可測量量。它們促進系統與子系統之間的通信，並以以下形式編碼：</p><ul><li><strong>Electrical Energy</strong>: Ion-based signals (e.g., Na⁺, K⁺) in ECG (heart) or EMG (muscle).<br><strong>電能</strong>：基於離子（例如Na⁺、K⁺）的信號，如心電圖（ECG，心臟）或肌電圖（EMG，肌肉）。</li><li><strong>Chemical Energy</strong>: Hormone or neurotransmitter concentrations.<br><strong>化學能</strong>：激素或神經傳遞物質濃度。</li><li><strong>Mechanical Energy</strong>: Blood pressure, cardiac valve sounds, or motion.<br><strong>機械能</strong>：血壓、心臟瓣膜聲音或運動。</li></ul><h3 id="Common-Biosignals-in-Medicine-醫學中常見的生物信號"><a href="#Common-Biosignals-in-Medicine-醫學中常見的生物信號" class="headerlink" title="Common Biosignals in Medicine | 醫學中常見的生物信號"></a>Common Biosignals in Medicine | 醫學中常見的生物信號</h3><ul><li><strong>ECG</strong>: Monitors heart electrical activity (e.g., for arrhythmias).  </li><li><strong>EMG</strong>: Measures muscle activity (e.g., for neuromuscular disorders).  </li><li><strong>Blood Pressure</strong>: Tracks cardiovascular dynamics.  </li><li><strong>Heart Rate</strong>: Reflects cardiac response.  </li><li><strong>Blood Gas Concentrations</strong>: Monitors respiratory function (e.g., CO₂, O₂).  </li><li><p><strong>Cardiac Valve Sounds</strong>: Detects valve function.  </p></li><li><p><strong>心電圖（ECG）</strong>：監測心臟電活動（例如心律不整）。  </p></li><li><strong>肌電圖（EMG）</strong>：測量肌肉活動（例如神經肌肉疾病）。  </li><li><strong>血壓</strong>：追蹤心血管動態。  </li><li><strong>心率</strong>：反映心臟反應。  </li><li><strong>血氣濃度</strong>：監測呼吸功能（例如CO₂、O₂）。  </li><li><strong>心臟瓣膜聲音</strong>：檢測瓣膜功能。</li></ul><h2 id="Key-Concepts-核心概念"><a href="#Key-Concepts-核心概念" class="headerlink" title="Key Concepts | 核心概念"></a>Key Concepts | 核心概念</h2><ul><li><strong>Input-Output Model</strong>: Describes how biological systems process stimuli (inputs) to produce responses (outputs). Example: The immune system detects pathogens (input) and produces antibodies (output).  </li><li><strong>Analog vs. Digital Biosignals</strong>:  <ul><li><strong>Analog</strong>: Continuous signals (e.g., raw ECG waveform).  </li><li><strong>Digital</strong>: Discrete, sampled signals for analysis (e.g., digitized ECG).  </li></ul></li><li><strong>Encoding and Sampling</strong>:  <ul><li><strong>Encoding</strong>: Biosignals are naturally encoded (e.g., electrical pulses in neurons).  </li><li><strong>Sampling</strong>: Converts analog signals to digital via sampling (regular intervals), quantization (discrete values), and encoding (binary data).  </li></ul></li><li><p><strong>MATLAB Simulation</strong>: Used to model biosignal acquisition, such as sampling an ECG signal, adding noise, and converting to digital format.  </p></li><li><p><strong>輸入-輸出模型</strong>：描述生物系統如何處理刺激（輸入）以產生反應（輸出）。示例：免疫系統檢測病原體（輸入）並產生抗體（輸出）。  </p></li><li><strong>模擬與數位生物信號</strong>：  <ul><li><strong>模擬</strong>：連續信號（例如原始心電圖波形）。  </li><li><strong>數位</strong>：離散、採樣信號用於分析（例如數位化的心電圖）。  </li></ul></li><li><strong>編碼與採樣</strong>：  <ul><li><strong>編碼</strong>：生物信號自然編碼（例如神經元中的電脈衝）。  </li><li><strong>採樣</strong>：通過採樣（固定間隔）、量化（離散值）和編碼（二進制數據）將模擬信號轉換為數位。  </li></ul></li><li><strong>MATLAB模擬</strong>：用於模擬生物信號採集，例如採樣心電圖信號、添加噪聲並轉換為數位格式。</li></ul><h2 id="Why-This-Matters-為什麼重要"><a href="#Why-This-Matters-為什麼重要" class="headerlink" title="Why This Matters | 為什麼重要"></a>Why This Matters | 為什麼重要</h2><p>Understanding biosignals and biological systems is critical for:  </p><ul><li>Diagnosing and monitoring medical conditions (e.g., heart disease, neurological disorders).  </li><li>Designing medical devices (e.g., pacemakers, wearable sensors).  </li><li>Advancing research in physiology and biomedical engineering.<br>理解生物信號和生物系統對於以下方面至關重要：  </li><li>診斷和監測醫療狀況（例如心臟病、神經疾病）。  </li><li>設計醫療設備（例如心臟起搏器、可穿戴傳感器）。  </li><li>推進生理學和生物醫學工程研究。</li></ul><p>This course will equip you with the tools to analyze biosignals, interpret system behavior, and apply computational techniques to real-world physiological data.<br>本課程將為您提供分析生物信號、解釋系統行為以及將計算技術應用於現實世界生理數據的工具。</p><h2 id="Next-Steps-後續步驟"><a href="#Next-Steps-後續步驟" class="headerlink" title="Next Steps | 後續步驟"></a>Next Steps | 後續步驟</h2><p>Explore the input-output model and signal processing through hands-on MATLAB exercises and case studies on biosignals like ECG and EMG.<br>通過MATLAB實操練習和生物信號（如心電圖和肌電圖）的案例研究，探索輸入-輸出模型和信號處理。</p><hr><h1 id="Lecture-1-Biomedical-Signals-and-Systems-第一講：生物醫學信號與系統"><a href="#Lecture-1-Biomedical-Signals-and-Systems-第一講：生物醫學信號與系統" class="headerlink" title="Lecture 1: Biomedical Signals and Systems / 第一講：生物醫學信號與系統"></a>Lecture 1: Biomedical Signals and Systems / 第一講：生物醫學信號與系統</h1><h2 id="Overview-概述"><a href="#Overview-概述" class="headerlink" title="Overview / 概述"></a>Overview / 概述</h2><p>This lecture introduces the fundamentals of biomedical signals and systems, covering types of systems (SISO and MIMO), continuous vs. discrete signals, sampling, Nyquist theorem, aliasing, and digitization/resolution concepts. Examples include temperature measurements, video frame rates, and LED flashing.<br>本講介紹了生物醫學信號與系統的基本知識，包括系統類型（SISO 和 MIMO）、連續信號與離散信號、取樣、Nyquist 定理、混疊以及數位化/解析度概念。範例包括溫度測量、視頻幀率和 LED 閃爍。</p><h2 id="Systems-系統"><a href="#Systems-系統" class="headerlink" title="Systems / 系統"></a>Systems / 系統</h2><p>Systems process inputs to produce outputs.<br>系統處理輸入以產生輸出。</p><h3 id="Input-Output-Stimuli-Response-Model-輸入-輸出-刺激-響應模型"><a href="#Input-Output-Stimuli-Response-Model-輸入-輸出-刺激-響應模型" class="headerlink" title="Input-Output / Stimuli-Response Model | 輸入-輸出 / 刺激-響應模型"></a>Input-Output / Stimuli-Response Model | 輸入-輸出 / 刺激-響應模型</h3><ul><li>Biological systems can be modeled as input-output systems where stimuli (e.g., drugs, mechanical force) produce responses (e.g., motion, reflexes).  </li><li>生物系統可被建模為輸入-輸出系統，其中刺激（例如藥物、機械力）產生響應（例如運動、反射）。</li></ul><h3 id="Single-Input-Single-Output-SISO-單輸入單輸出-SISO"><a href="#Single-Input-Single-Output-SISO-單輸入單輸出-SISO" class="headerlink" title="Single Input Single Output (SISO) / 單輸入單輸出 (SISO)"></a>Single Input Single Output (SISO) / 單輸入單輸出 (SISO)</h3><ul><li><strong>Example</strong>: Thermistor / <strong>範例</strong>：熱敏電阻<ul><li>Input: Temperature / 輸入：溫度</li><li>System: Thermistor / 系統：熱敏電阻</li><li>Output: Voltage / 輸出：電壓<div class="mermaid-wrap"><pre class="mermaid-src" hidden>    flowchart LRsubgraph SISO [SISO 單輸入單輸出]  Temperature溫度 --&gt; Thermistor熱敏電阻 --&gt; Voltage電壓  end  </pre></div></li></ul></li></ul><h3 id="Multiple-Input-Multiple-Output-MIMO-多輸入多輸出-MIMO"><a href="#Multiple-Input-Multiple-Output-MIMO-多輸入多輸出-MIMO" class="headerlink" title="Multiple Input Multiple Output (MIMO) / 多輸入多輸出 (MIMO)"></a>Multiple Input Multiple Output (MIMO) / 多輸入多輸出 (MIMO)</h3><ul><li><strong>Example</strong>: Human Body / <strong>範例</strong>：人體</li><li>Inputs: Exercise, Sweat, Food / 輸入：運動、出汗、食物</li><li>Outputs: Body Weight (multiple factors influencing) / 輸出：體重（多種因素影響）</li></ul><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    flowchart LR  subgraph A[Input 輸入]    Exercise運動 --- Fuel燃料 --- Food食物    direction BT  end  subgraph B[System系統]    Body身體  end  subgraph C[Output 輸出]    Sweat出汗 --- Body-Weight體重    direction BT  end  A --&gt; B   B --&gt; C  </pre></div><h3 id="Analog-and-Digital-Biosignals-模擬和數位生物信號"><a href="#Analog-and-Digital-Biosignals-模擬和數位生物信號" class="headerlink" title="Analog and Digital Biosignals | 模擬和數位生物信號"></a>Analog and Digital Biosignals | 模擬和數位生物信號</h3><ul><li>Biosignals are either continuous analog (fluctuations over time) or discrete digital (encoded sequences). Conversion to electrical signals uses biotransducers (e.g., ECG electrodes).  </li><li>生物信號要么是連續模擬（隨時間波動），要么是離散數位（編碼序列）。轉換為電信號使用生物轉換器（例如心電圖電極）。</li></ul><h3 id="Comparison-比較"><a href="#Comparison-比較" class="headerlink" title="Comparison | 比較"></a>Comparison | 比較</h3><div class="table-container"><table><thead><tr><th>Feature</th><th>Analog Signal</th><th>Digital Signal</th></tr></thead><tbody><tr><td><strong>Representation</strong></td><td>Continuous</td><td>Discrete</td></tr><tr><td><strong>Examples</strong></td><td>ECG waveform</td><td>Sampled ECG</td></tr><tr><td><strong>Pros</strong></td><td>More detail</td><td>Easier processing</td></tr><tr><td><strong>Cons</strong></td><td>Noise-sensitive</td><td>Risk of aliasing</td></tr></tbody></table></div><h2 id="Signal-Encoding-信號編碼"><a href="#Signal-Encoding-信號編碼" class="headerlink" title="Signal Encoding | 信號編碼"></a>Signal Encoding | 信號編碼</h2><ul><li>Biosignals use continuous (analog) or discrete (digital) encoding.  </li><li>生物信號使用連續（模擬）或離散（數位）編碼。</li></ul><h3 id="Continuous-Encoding-連續編碼"><a href="#Continuous-Encoding-連續編碼" class="headerlink" title="Continuous Encoding | 連續編碼"></a>Continuous Encoding | 連續編碼</h3><ul><li>Encodes information into continuous fluctuations, e.g., temperature to voltage (Voltage = (Temp + 10) * 0.5).  </li><li>將信息編碼為連續波動，例如溫度到電壓（電壓 = (溫度 + 10) * 0.5）。</li></ul><h2 id="Sampling-採樣"><a href="#Sampling-採樣" class="headerlink" title="Sampling | 採樣"></a>Sampling | 採樣</h2><ul><li>Converts continuous signals to digital by sampling in time (Ts = 1/fs) and amplitude. Nyquist rate: fs ≥ 2 * highest frequency to avoid aliasing.</li><li>通過時間（Ts = 1/fs）和幅度採樣將連續信號轉換為數位。Nyquist率：fs ≥ 2 * 最高頻率以避免混疊。</li></ul><h3 id="Example-示例"><a href="#Example-示例" class="headerlink" title="Example | 示例"></a>Example | 示例</h3><ul><li>75 mmHg (0-100 mmHg to 0-5V) on 10-bit ADC gives 3.75V, digital value ≈ 768.</li><li>75 mmHg（0-100 mmHg映射到0-5V）在10位ADC上給出3.75V，數字值 ≈ 768。</li></ul><h3 id="ECG-Sampling-心電圖採樣"><a href="#ECG-Sampling-心電圖採樣" class="headerlink" title="ECG Sampling | 心電圖採樣"></a>ECG Sampling | 心電圖採樣</h3><ul><li>For 120 Hz ECG, minimum fs = 240 Hz. At 250 Hz, 2500 samples in 10s. Downsampling to 125 Hz risks aliasing.</li><li>對於120 Hz心電圖，最小fs = 240 Hz。在250 Hz，10秒內2500樣本。下採樣到125 Hz有混疊風險。</li></ul><hr><h1 id="Lecture-2-Signal-Properties-Basic-Measurements-講座2：信號屬性-基本測量"><a href="#Lecture-2-Signal-Properties-Basic-Measurements-講座2：信號屬性-基本測量" class="headerlink" title="Lecture 2: Signal Properties - Basic Measurements | 講座2：信號屬性 - 基本測量"></a>Lecture 2: Signal Properties - Basic Measurements | 講座2：信號屬性 - 基本測量</h1><ul><li>This lecture covers mean, variance, RMS, and averaging for continuous and discrete signals.</li><li>本講座涵蓋連續和離散信號的均值、變異數、RMS和平均。</li></ul><h2 id="Continuous-Time-Signals-連續時間信號"><a href="#Continuous-Time-Signals-連續時間信號" class="headerlink" title="Continuous-Time Signals | 連續時間信號"></a>Continuous-Time Signals | 連續時間信號</h2><ul><li>Mean μ = (1/T) ∫ x(t) dt (e.g., ECG baseline correction). Variance σ² and standard deviation σ measure fluctuations. RMS = sqrt( (1/T) ∫ x(t)^2 dt ) measures power. For sinusoid, RMS = A/√2.</li><li>均值 μ = (1/T) ∫ x(t) dt（例如心電圖基線修正）。變異數 σ² 和標準差 σ 測量波動。RMS = sqrt( (1/T) ∫ x(t)^2 dt ) 測量功率。對於正弦，RMS = A/√2。<br>English Example: x(t) = 2 sin(100π t), RMS = 1.414.<br>繁體中文示例: x(t) = 2 sin(100π t)，RMS = 1.414。<br>Discrete-Time Signals | 離散時間信號</li><li>Mean μ = (1/N) Σ x[n]. Variance σ² and standard deviation σ measure fluctuations. RMS = sqrt( (1/N) Σ x[n]^2 ).</li><li>均值 μ = (1/N) Σ x[n]。變異數 σ² 和標準差 σ 測量波動。RMS = sqrt( (1/N) Σ x[n]^2 )。<br>English Example: x[n] = 1,3,5,4,2, RMS ≈ 3.317.<br>繁體中文示例: x[n] = 1,3,5,4,2，RMS ≈ 3.317。</li></ul><h2 id="Averaging-平均"><a href="#Averaging-平均" class="headerlink" title="Averaging | 平均"></a>Averaging | 平均</h2><ul><li>Averaging reduces noise by 1/√N. Ensemble averaging aligns multiple signals for noise reduction.</li><li>平均通過1/√N減少噪聲。集成平均對齊多個信號以減少噪聲。</li></ul><hr>]]></content>
    
    
    <summary type="html">THE FOLLOWING BLOG USE GENERATIVE A.I. WRITE, PLS BE NOTICEFY!</summary>
    
    
    
    <category term="Education" scheme="https://victor999p.github.io/categories/Education/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/"/>
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/Signals-and-Systems/"/>
    
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/tags/Biomedical-Engineering/"/>
    
    <category term="Lecture notes" scheme="https://victor999p.github.io/tags/Lecture-notes/"/>
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/tags/Signals-and-Systems/"/>
    
  </entry>
  
  <entry>
    <title>HW1 Signals and Systems | 生物信號與生物系統</title>
    <link href="https://victor999p.github.io/posts/1775fd89.html"/>
    <id>https://victor999p.github.io/posts/1775fd89.html</id>
    <published>2025-10-01T09:54:21.637Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homework-1"><a href="#Homework-1" class="headerlink" title="Homework 1"></a>Homework 1</h1><div class="note info flat"><p>In this homework set, you will work with a set of Visual Evoked Response (VER) data. The VER is an EEG signal recorded near the visual cortex following a visual stimulus, like a flash of light. The individual recordings contain a significant amount of noise, thus we will be using <strong>ensemble averaging</strong> to reduce the noise and enhance the signal response.</p></div><div class="note info flat"><p>這份作業的目的是讓你熟悉如何處理視覺誘發反應（VER）腦電訊號，並透過<strong>集成平均（ensemble averaging）</strong>來降低噪聲、提取神經反應訊號。VER 是在視覺皮質區域記錄的 EEG 訊號，通常在視覺刺激（如閃光）後出現。由於單次試驗的訊號中含有大量噪聲，因此我們需要透過多次試驗的平均來強化真正的神經反應。 </p></div><h2 id="🧠-Part-1-Plot-EEG-signal-繪製原始-EEG-訊號"><a href="#🧠-Part-1-Plot-EEG-signal-繪製原始-EEG-訊號" class="headerlink" title="🧠 Part 1: Plot EEG signal 繪製原始 EEG 訊號"></a>🧠 Part 1: Plot EEG signal 繪製原始 EEG 訊號</h2><p>✅ Objective: Visualize one raw EEG signal to understand its noisy nature. 觀察單次試驗的腦電訊號，了解其噪聲特性。<br>📌 Steps:</p><ul><li><ol><li>Load the VER data from ver.mat. This contains 100 simulated VERs. 從 ver.mat 檔案中載入 VER 資料。</li></ol></li><li><ol><li>Check the size of ver. 檢查 ver 的大小（應為 100 × 500）。</li></ol></li><li><ol><li>Plot one of the individual responses to visualize the “raw” EEG signal. 繪製第一筆試驗資料（即 ver 的第一列）。<br><img src="/img/BME3123/BME3123hw1_pic1.jpg" alt="“raw” EEG signal"></li></ol></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">load(<span class="string">&#x27;ver.mat&#x27;</span>);           <span class="comment">% Load VER data</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="built_in">size</span>(ver));           <span class="comment">% Display the size of the matrix</span></span><br><span class="line"></span><br><span class="line">t = <span class="number">0</span>:<span class="number">0.005</span>:(<span class="built_in">size</span>(ver,<span class="number">2</span>)<span class="number">-1</span>)*<span class="number">0.005</span>;  <span class="comment">% Create time vector based on sampling interval</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">plot</span>(t, ver(<span class="number">1</span>,:));         <span class="comment">% Plot the first trial</span></span><br><span class="line">xlabel(<span class="string">&#x27;Time (s)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;EEG Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Raw VER Signal (Trial 1)&#x27;</span>);</span><br></pre></td></tr></table></figure><p>🔍 Code Breakdown<br><strong>t = 0:0.005:(size(ver,2)-1)*0.005;</strong></p><ul><li>size(ver,2) gets the <strong>number of columns</strong> in the matrix ver, which represents the number of time points per trial.</li><li>0:0.005:… creates a vector starting at 0, with increments of 0.005 seconds (sampling interval).</li><li><p>The final value is (size(ver,2)-1)*0.005, which ensures the time vector matches the length of each trial.<br>This time vector t is essential for plotting EEG signals against time in seconds.</p></li><li><p>size(ver,2) 取得 ver 矩陣的欄數，也就是每筆試驗的時間點數量。</p></li><li>0:0.005:… 表示從 0 開始，每 0.005 秒取一個時間點（即採樣間隔）。</li><li>結尾的 (size(ver,2)-1)*0.005 確保時間向量的長度與試驗資料一致。<br>這樣建立的 t 向量可以用來在繪圖時將腦電訊號對應到實際時間（秒）。</li></ul><h2 id="📊-Part-2-Ensemble-Averaging-集成平均"><a href="#📊-Part-2-Ensemble-Averaging-集成平均" class="headerlink" title="📊 Part 2: Ensemble Averaging 集成平均"></a>📊 Part 2: Ensemble Averaging 集成平均</h2><p>✅ Objective: Reduce noise by averaging multiple trials. 透過多次試驗平均來降低噪聲。<br>📌 Steps:</p><ul><li>Use MATLAB’s mean function to average multiple trials. 使用 MATLAB 的 mean 函數來平均多條試驗訊號。</li><li>First, average the first 25 trials → call this avg25. 先平均前 25 條試驗 → 命名為 avg25</li><li>Then, average all 100 trials → call this avg100. 再平均全部 100 條試驗 → 命名為 avg100</li><li>Plot:<ul><li>One raw trial</li><li>avg25</li><li>avg100 All on the same graph to compare how averaging reduces noise. 看看平均後雜訊如何減少。</li></ul></li></ul><p><img src="/img/BME3123/BME3123hw1_pic2.png" alt="averaging reduces noise"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">avg25 = <span class="built_in">mean</span>(ver(<span class="number">1</span>:<span class="number">25</span>,:), <span class="number">1</span>);   <span class="comment">% Average of first 25 trials</span></span><br><span class="line">avg100 = <span class="built_in">mean</span>(ver, <span class="number">1</span>);          <span class="comment">% Average of all 100 trials</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">plot</span>(t, ver(<span class="number">1</span>,:), <span class="string">&#x27;Color&#x27;</span>,[<span class="number">0.7</span>,<span class="number">0.7</span>,<span class="number">0.7</span>]); <span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot</span>(t, avg25, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);</span><br><span class="line"><span class="built_in">plot</span>(t, avg100, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Time (s)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;EEG Amplitude&#x27;</span>);</span><br><span class="line"><span class="built_in">legend</span>(<span class="string">&#x27;Raw Trial&#x27;</span>, <span class="string">&#x27;25-Trial Avg&#x27;</span>, <span class="string">&#x27;100-Trial Avg&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;VER Signal Averaging Comparison&#x27;</span>);</span><br></pre></td></tr></table></figure><p>🔍 Code Breakdown<br><strong>avg25 = mean(ver(1:25,:), 1);</strong></p><ul><li><strong>ver</strong> is a matrix or 2D array. 是一個矩陣或二維陣列。</li><li><strong>1:25</strong> means you’re selecting rows 1 through 25. 表示你正在選取第 1 到第 25 列的資料。</li><li><strong>**: means you’re selecting all columns in those rows. 表示你選取這些列中的所有欄位。<br>So, </strong>ver(1:25,:)<strong> gives you a 25×N matrix, where N is the number of columns in ver.<br>所以 </strong>ver(1:25,:)** 會回傳一個 25×N 的矩陣，其中 N 是 ver 的欄位數（也就是每筆試驗的時間點數量）。</li><li><strong>mean(…, 1)</strong> Computes the mean along the first dimension (rows), meaning it averages the data across the 25 trials for each time point. 對這 25 行資料沿著第 1 維（行）做平均，也就是對每一個時間點的 25 次試驗取平均。</li><li><strong>avg25</strong>: Stores the result of the averaging, which is a 1×N vector representing the average EEG signal at each time point. 儲存平均後的結果，是一個1×N 的向量，代表每個時間點的平均 EEG 訊號。</li></ul><h2 id="🔍-Part-III-Noise-Reduction-Evaluation-噪聲降低評估"><a href="#🔍-Part-III-Noise-Reduction-Evaluation-噪聲降低評估" class="headerlink" title="🔍 Part III: Noise Reduction Evaluation 噪聲降低評估"></a>🔍 Part III: Noise Reduction Evaluation 噪聲降低評估</h2><p>✅ Objective: Quantify how much noise is reduced by averaging. 量化平均處理後的噪聲降低效果。<br>📌 Steps:</p><ul><li>Load actual_ver from ver.mat (the noise-free signal).  從 ver.mat 中載入無噪聲的 VER 訊（actual_ver）。</li><li>Subtract actual_ver from: 分別從原始試驗、avg25 和 avg100 中減去 actual_ver，得到噪聲估計。<ul><li>One raw trial</li><li>avg25</li><li>avg100 to estimate noise.</li></ul></li><li>Compute standard deviation of each noise estimate: 計算每個噪聲估計的標準差（STD）作為噪聲強度指標。<ul><li>std_ver, std_avg25, std_avg100</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">load(<span class="string">&#x27;ver.mat&#x27;</span>, <span class="string">&#x27;actual_ver&#x27;</span>);  <span class="comment">% Load noise-free signal</span></span><br><span class="line"></span><br><span class="line">noise_ver = ver(<span class="number">1</span>,:) - actual_ver;</span><br><span class="line">noise_avg25 = avg25 - actual_ver;</span><br><span class="line">noise_avg100 = avg100 - actual_ver;</span><br><span class="line"></span><br><span class="line">std_ver = std(noise_ver);</span><br><span class="line">std_avg25 = std(noise_avg25);</span><br><span class="line">std_avg100 = std(noise_avg100);</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;STD of individual noise: &#x27;</span>, num2str(std_ver)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;STD of 25-trial average noise: &#x27;</span>, num2str(std_avg25)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;STD of 100-trial average noise: &#x27;</span>, num2str(std_avg100)]);</span><br></pre></td></tr></table></figure><h2 id="📐-Part-IV-Comparison-with-Theoretical-Prediction-與理論預測比較"><a href="#📐-Part-IV-Comparison-with-Theoretical-Prediction-與理論預測比較" class="headerlink" title="📐 Part IV: Comparison with Theoretical Prediction 與理論預測比較"></a>📐 Part IV: Comparison with Theoretical Prediction 與理論預測比較</h2><p>✅Objective: Compare actual noise reduction with theoretical expectations. 驗證噪聲是否依照理論預測隨平均次數減少<br>📌Steps:</p><ul><li>Use the formula:<br>-\text{Expected STD} = \frac{\text{STD of raw trial}}{\sqrt{N}}- where N = 25 or 100</li><li>Compare expected vs actual standard deviations.- 計算預測值並與實際值比較。</li><li>Discuss any differences and possible reasons . 討論差異與可能原因。<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">expected_std_avg25 = std_ver / <span class="built_in">sqrt</span>(<span class="number">25</span>);</span><br><span class="line">expected_std_avg100 = std_ver / <span class="built_in">sqrt</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;Expected STD for 25-trial: &#x27;</span>, num2str(expected_std_avg25)]);</span><br><span class="line"><span class="built_in">disp</span>([<span class="string">&#x27;Expected STD for 100-trial: &#x27;</span>, num2str(expected_std_avg100)]);</span><br></pre></td></tr></table></figure><h2 id="Result-結果"><a href="#Result-結果" class="headerlink" title="Result | 結果"></a>Result | 結果</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%code sample for Avg_25</span></span><br><span class="line">fprintf(<span class="string">&#x27;Actual STD (Avg25): %.4f | Expected: %.4f\n | Differeces: %.4f\n&#x27;</span>, std_avg25, expected_std_avg25, diff_avg25);</span><br></pre></td></tr></table></figure></li><li>Actual STD (Raw): 1.0405</li><li>Actual STD (Avg25): 0.1986 | Expected: 0.2081 | Differeces: 0.0095</li><li>Actual STD (Avg100): 0.1005 | Expected: 0.1040 | Differeces: 0.0035</li></ul><h2 id="Discussion-of-Discrepancies-差異原因探討"><a href="#Discussion-of-Discrepancies-差異原因探討" class="headerlink" title="Discussion of Discrepancies | 差異原因探討 :"></a>Discussion of Discrepancies | 差異原因探討 :</h2><p>Several factors could explain the slight differences between actual and expected STD values | 儘管差異不大，仍可能由以下因素造成 :</p><ul><li><strong>Non-Gaussian Noise</strong>: The theoretical model assumes random, Gaussian-distributed noise. Real EEG data often includes artifacts (e.g., muscle movement, eye blinks) that deviate from this assumption.</li><li><p><strong>非高斯噪音</strong>：理論假設噪音為高斯分布，但實際 EEG 資料可能包含肌肉活動、眼動等非隨機干擾。</p></li><li><p><strong>Signal Variability Across Trials</strong>: If the underlying neural response varies slightly between trials, averaging won’t perfectly cancel out the variability, leading to a higher actual STD than expected.</p></li><li><p><strong>試驗間訊號變異</strong>：若神經反應在不同試驗中略有差異，平均後仍可能保留部分變異。</p></li><li><p><strong>Baseline Drift or Slow Trends</strong>: Low-frequency fluctuations in the signal can persist across trials and resist averaging, subtly inflating the STD.</p></li><li><p><strong>基線漂移或慢速趨勢</strong>：低頻波動可能在多次試驗中持續存在，不易被平均消除。</p></li><li><p><strong>Finite Sample Effects</strong>: The expected STD is based on ideal statistical behavior. With only 25 or 100 trials, small sample effects can cause minor deviations from theory.</p></li><li><p><strong>樣本數有限</strong>：理論值基於理想統計行為，實際試驗數量有限時可能出現微小偏差。</p></li><li><p><strong>Filtering or Preprocessing</strong>: If any filtering was applied before averaging, it could alter the noise characteristics and affect STD calculations</p></li><li><strong>前處理影響</strong>：若在平均前進行過濾或其他處理，可能改變噪音特性，影響 STD 計算。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Homework-1&quot;&gt;&lt;a href=&quot;#Homework-1&quot; class=&quot;headerlink&quot; title=&quot;Homework 1&quot;&gt;&lt;/a&gt;Homework 1&lt;/h1&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;In this ho</summary>
      
    
    
    
    <category term="Education" scheme="https://victor999p.github.io/categories/Education/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/"/>
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/Signals-and-Systems/"/>
    
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/tags/Signals-and-Systems/"/>
    
    <category term="biomedical engineering" scheme="https://victor999p.github.io/tags/biomedical-engineering/"/>
    
    <category term="Homework" scheme="https://victor999p.github.io/tags/Homework/"/>
    
  </entry>
  
  <entry>
    <title>HW2 Signals and Systems | 生物信號與生物系統</title>
    <link href="https://victor999p.github.io/posts/6d4835d0.html"/>
    <id>https://victor999p.github.io/posts/6d4835d0.html</id>
    <published>2025-10-01T09:54:21.637Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Homework-2"><a href="#Homework-2" class="headerlink" title="Homework 2"></a>Homework 2</h1><div class="note info flat"><p>In this homework set, you will aims to build your skills in visualizing <strong>signal transformations</strong> and understanding the process of <strong>discretization</strong>, which are fundamental in analyzing and processing biomedical signals in systems like those used in medical diagnostics or monitoring.</p></div><div class="note info flat"><p>在這組作業中，您將致力於培養可視化<strong>訊號轉換</strong>和理解<strong>離散化</strong>過程的技能，這些技能對於分析和處理醫療診斷或監測系統中的生物醫學訊號至關重要。</p></div><h1 id="Code-usage-in-Matlab"><a href="#Code-usage-in-Matlab" class="headerlink" title="Code usage in Matlab"></a>Code usage in Matlab</h1><p>To obtain the orginal “Continous Time Signal with Straight Line” x(t)</p><ul><li>x-axis represent: Time</li><li>y-axis represent: Amplitude<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">y = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">-5</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">t = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>( t, y, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);                 </span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Continous Time Signal with Straight Line&#x27;</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure><img src="/img/BME3123/BME3123hw2_pic1.jpg" alt="Continous Time Signal with Straight Line"></li></ul><h2 id="Signal-Transformations-訊號轉換-Question-1-and-2"><a href="#Signal-Transformations-訊號轉換-Question-1-and-2" class="headerlink" title="Signal Transformations | 訊號轉換: Question 1 and 2"></a>Signal Transformations | 訊號轉換: Question 1 and 2</h2><ul><li><ol><li>Draw 𝑥(𝑡+1).</li></ol></li><li><ol><li>Draw 𝑥(−2𝑡+1).</li></ol></li></ul><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Question 1</button><button type="button" class="tab">Question 2</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>Question 1</strong><br>Draw Draw 𝑥(𝑡+1):</p><ul><li><strong>t+1</strong> mean moved the signal toward left by 1 unit | 將信號向左移動 1 單位</li><li>Or by calculate | 或透過計算 :<ul><li>orginal_time_data = new_time_data + 1  </li><li>new_time_data = orginal_time_data - 1</li><li>[ -1, 0, 0, 1, 2, 3, 4, 5, 6] -&gt; [ -2, -1, -1, 0, 1, 2, 3, 4, 5]<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t_q1 = t<span class="number">-1</span>;  <span class="comment">% by using the fomular above</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>( t_q1, y, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);                 </span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;*Question 1&#x27;</span>);</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure></li></ul></li></ul></div><div class="tab-item-content"><p><strong>Question 2</strong><br>Draw Draw 𝑥(-2𝑡+1):</p><ul><li>In <strong>−2𝑡+1</strong> involve:<ul><li>“2t” time scaling | 時間縮放: compression by a factor of <strong>2</strong>. | 壓縮 <strong>2</strong> 倍。</li><li>“-“reversal | 反轉: due to the negative sign <strong>-</strong> infront of 2t. | 由於 2t 前面的負號 <strong>-</strong>。 </li><li>“+1” shifting | 移位 : moved the signal. | 訊號平移。</li></ul></li><li>By calculate | 或透過計算 :<ul><li>orginal_time_data = 2 * new_time_data + 1  </li><li>new_time_data = - (orginal_time_data - 1) / 2</li><li>[ -1, 0, 0, 1, 2, 3, 4, 5, 6] -&gt; [ 1, 0.5, 0.5, 0, -0.5, -1, -1.5, -2, -2.5]<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">t_q2 = -(t<span class="number">-1</span>)/<span class="number">2</span>; <span class="comment">% by using the fomular above</span></span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">plot</span>(t_q2, y, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);                 </span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;Question 2&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="Signal-Sampling-Question-3-4-amp-5"><a href="#Signal-Sampling-Question-3-4-amp-5" class="headerlink" title="Signal Sampling : Question 3, 4 &amp; 5"></a>Signal Sampling : Question 3, 4 &amp; 5</h2><ul><li><ol><li>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=1.</li></ol></li><li><ol><li>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = 0.</li></ol></li><li><ol><li>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = -1.</li></ol></li><li>Discretize 𝑥(𝑡) | 離散化𝑥(𝑡): <ul><li>We need to extract the most significant (extreme) value — either the maximum or minimum — within each 1-second interval. | 我們需要提取每 1 秒間隔內最重要的（極端）值 - 最大值或最小值。<br>From the original graph we can obtain following result of the Discretize dataset: <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">discretize_y = [<span class="number">0</span>,<span class="number">-5</span>,<span class="number">5</span>,<span class="number">-3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>];</span><br><span class="line">discretize_t = [<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br></pre></td></tr></table></figure></li></ul></li></ul><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">Question 3</button><button type="button" class="tab">Question 4</button><button type="button" class="tab">Question 2</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>Question 3</strong><br>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=1.:</p><ul><li>Discretize 𝑥(𝑡): <ul><li>This introduces the concept of sampling a continuous signal at regular intervals (every 1 unit of time) | 以固定間隔（每 1 個時間單位）對連續訊號進行取樣的概念</li></ul></li></ul><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">stem( discretize_t, discretize_y, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>); </span><br><span class="line">xlabel(<span class="string">&#x27;Time (s)&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;3. Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=1.&#x27;</span>)</span><br><span class="line">grid on;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content"><p><strong>Question 4</strong><br>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = 0 :</p><ul><li>Discretize 𝑥(𝑡):<ul><li>similarly to question 3</li></ul></li><li>Sampling period of 𝑇𝑠=2, starting from t = 0:<ul><li>Sampling with a larger interval and start from time = 0 | 以更大的間隔採樣，並從時間= 0開始</li><li>In this situation we use <strong>list_name(starting_index:inverval:end)</strong> to obtain the data<ul><li>In Matlab index starting with <strong>[1,2,3,4] not [0,1,2,3]</strong> | 在Matlab中，索引以<strong>[1,2,3,4]開頭，而非[0,1,2,3]</strong></li></ul></li><li>discretize_y(2:2:end) = [0,-5,5,-3,2,1,0,0] -&gt; [-5,-3,1,0]</li><li>discretize_t(2:2:end) = [-1,0,1,2,3,4,5,6] -&gt; [0,2,4,6]<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">discretize_t_q4 = discretize_t(<span class="number">2</span>:<span class="number">2</span>:<span class="keyword">end</span>); </span><br><span class="line">discretize_y_q4 = discretize_y(<span class="number">2</span>:<span class="number">2</span>:<span class="keyword">end</span>); </span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">stem(discretize_t_q4, discretize_y_q4, <span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;4. Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = 0 &#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></div><div class="tab-item-content"><p><strong>Question 5</strong></p><ol><li>Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = -1 :</li></ol><ul><li>Discretize 𝑥(𝑡):<ul><li>similarly to question 3</li></ul></li><li>Sampling period of 𝑇𝑠=2, starting from t = -1 :<ul><li>Sampling with a larger interval and start from time = -1 | | 以更大的間隔採樣，並從時間= -1開始</li><li>In this situation we use <strong>list_name(starting_index:inverval:end)</strong> to obtain the data<ul><li>In Matlab index starting with <strong>[1,2,3,4] not [0,1,2,3]</strong> | 在Matlab中，索引以<strong>[1,2,3,4]開頭，而非[0,1,2,3]</strong></li></ul></li><li>discretize_y(1:2:end) = [0,-5,5,-3,2,1,0,0] -&gt; [0,5,2,0]</li><li>discretize_t(1:2:end) = [-1,0,1,2,3,4,5,6] -&gt; [-1,1,3,5]<figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">discretize_t_q5 = discretize_t(<span class="number">1</span>:<span class="number">2</span>:<span class="keyword">end</span>); </span><br><span class="line">discretize_y_q5 = discretize_y(<span class="number">1</span>:<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">subplot(<span class="number">3</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">stem( discretize_t_q5, discretize_y_q5, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;LineWidth&#x27;</span>, <span class="number">1.5</span>);</span><br><span class="line">xlabel(<span class="string">&#x27;Time&#x27;</span>);</span><br><span class="line">ylabel(<span class="string">&#x27;Amplitude&#x27;</span>);</span><br><span class="line">title(<span class="string">&#x27;5. Discretize 𝑥(𝑡) using a sampling period of 𝑇𝑠=2, starting from t = -1&#x27;</span>);</span><br><span class="line">grid on;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="Result-output-結果輸出"><a href="#Result-output-結果輸出" class="headerlink" title="Result output |  結果輸出"></a>Result output |  結果輸出</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% Display output with windows</span></span><br><span class="line">set(gcf, <span class="string">&#x27;Position&#x27;</span>, [<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">600</span>]);</span><br></pre></td></tr></table></figure><ul><li>gcf: “Get Current Figure” — refers to the active figure window | 取得活動圖形視窗</li><li>‘Position’: Specifies the window’s position and size | 指定視窗的位置和大小</li><li>[100, 100, 800, 600]:<ul><li>100, 100: Position of the bottom-left corner of the window on your screen (in pixels) | 視窗左下角在螢幕上的位置（以像素為單位）</li><li>800: Width of the window | 視窗寬度</li><li>600: Height of the window | 視窗高度</li></ul></li></ul><p><img src="/img/BME3123/BME3123hw2_pic2.jpg" alt="Continous Time Signal with Straight Line"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Homework-2&quot;&gt;&lt;a href=&quot;#Homework-2&quot; class=&quot;headerlink&quot; title=&quot;Homework 2&quot;&gt;&lt;/a&gt;Homework 2&lt;/h1&gt;&lt;div class=&quot;note info flat&quot;&gt;&lt;p&gt;In this ho</summary>
      
    
    
    
    <category term="Education" scheme="https://victor999p.github.io/categories/Education/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/"/>
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/Signals-and-Systems/"/>
    
    
    <category term="Signals and Systems" scheme="https://victor999p.github.io/tags/Signals-and-Systems/"/>
    
    <category term="biomedical engineering" scheme="https://victor999p.github.io/tags/biomedical-engineering/"/>
    
    <category term="Homework" scheme="https://victor999p.github.io/tags/Homework/"/>
    
  </entry>
  
  <entry>
    <title>Biomaterials-2 | 生物材料-2</title>
    <link href="https://victor999p.github.io/posts/f5cdc6c3.html"/>
    <id>https://victor999p.github.io/posts/f5cdc6c3.html</id>
    <published>2025-10-01T09:54:21.636Z</published>
    <updated>2025-10-01T09:54:21.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lecture-2-Surface-and-Bulk-Properties-of-Biomaterials"><a href="#Lecture-2-Surface-and-Bulk-Properties-of-Biomaterials" class="headerlink" title="Lecture 2: Surface and Bulk Properties of Biomaterials"></a>Lecture 2: Surface and Bulk Properties of Biomaterials</h1><h2 id="Lecture-Introduction"><a href="#Lecture-Introduction" class="headerlink" title="Lecture Introduction"></a>Lecture Introduction</h2><ul><li><strong>Title</strong>: Surface and Bulk Properties of Biomaterials</li></ul><h2 id="Three-Aspects-in-Biomaterials"><a href="#Three-Aspects-in-Biomaterials" class="headerlink" title="Three Aspects in Biomaterials"></a>Three Aspects in Biomaterials</h2><ul><li><strong>Aspects</strong>:<ol><li>Biological materials or body</li><li>Implant materials</li><li>Interaction between the two in the body</li></ol></li></ul><h2 id="Surface-and-Bulk-Properties-Overview"><a href="#Surface-and-Bulk-Properties-Overview" class="headerlink" title="Surface and Bulk Properties Overview"></a>Surface and Bulk Properties Overview</h2><ul><li><strong>Surface Properties</strong>:<ul><li>Surface contact angle</li><li>Scanning Electron Microscopy (SEM)</li><li>Electron Spectroscopy for Chemical Analysis (ESCA or XPS)</li><li>Time-of-Flight Secondary Ion Mass Spectrometry (TOF-SIMS)</li><li>Raman spectroscopy</li></ul></li><li><strong>Bulk Properties</strong>:<ul><li>Stress and strain</li><li>Shear stress and shear strain</li><li>Young’s modulus and shear modulus</li></ul></li></ul><h2 id="Surface-Properties-Characteristics"><a href="#Surface-Properties-Characteristics" class="headerlink" title="Surface Properties Characteristics"></a>Surface Properties Characteristics</h2><ul><li><strong>Key Points</strong>:<ol><li>Surfaces have unique reactivity.</li><li>The surface is inevitably different from the bulk.</li><li>Surface molecules can exhibit considerable mobility.</li></ol></li></ul><h3 id="Surface-Dynamics"><a href="#Surface-Dynamics" class="headerlink" title="Surface Dynamics"></a>Surface Dynamics</h3><ul><li><strong>Observation</strong>: The movement of atoms and molecules near the surface in response to the external environment is highly significant.</li></ul><h3 id="Protein-Surface-Interaction"><a href="#Protein-Surface-Interaction" class="headerlink" title="Protein-Surface Interaction"></a>Protein-Surface Interaction</h3><ul><li><strong>Effect of Protein Size</strong>: Larger proteins with more amino acids can make more interactions with a surface.</li></ul><h3 id="Surface-Characteristics"><a href="#Surface-Characteristics" class="headerlink" title="Surface Characteristics"></a>Surface Characteristics</h3><ul><li><strong>Factors</strong>:<ul><li>Roughness (A)</li><li>Patterns (C)</li><li>Wettability, surface mobility, chemical composition (B)</li><li>Electrical charge, crystallinity (E)</li><li>Heterogeneity (D &amp; F)</li></ul></li></ul><h3 id="Cosmetic-Contact-Lenses"><a href="#Cosmetic-Contact-Lenses" class="headerlink" title="Cosmetic Contact Lenses"></a>Cosmetic Contact Lenses</h3><ul><li><strong>Context</strong>: Pigments in cosmetic contact lenses may alter surface properties, impacting comfort compared to clear lenses.</li><li><strong>Factors</strong>:<ul><li>Location and depth of pigment particles from the lens surface</li><li>Coefficient of friction</li><li>Surface roughness</li></ul></li><li><strong>Source</strong>: Johnson &amp; Johnson Vision Inc, <em>Eye Contact Lens</em>, 2018 Nov; 44(2):S256</li></ul><h3 id="Surface-Analysis-Considerations"><a href="#Surface-Analysis-Considerations" class="headerlink" title="Surface Analysis Considerations"></a>Surface Analysis Considerations</h3><ul><li><strong>Challenges</strong>:<ol><li>All methods can alter the surface.</li><li>Potential for artifacts requires corroborative information from multiple methods to construct a complete surface profile.</li></ol></li></ul><h3 id="Surface-and-Bulk-Properties-Detailed"><a href="#Surface-and-Bulk-Properties-Detailed" class="headerlink" title="Surface and Bulk Properties (Detailed)"></a>Surface and Bulk Properties (Detailed)</h3><ul><li><strong>Surface Properties</strong>:<ul><li>Surface contact angle (hydrophobicity)</li><li>SEM (roughness and patterns)</li><li>ESCA or XPS (chemical composition)</li><li>TOF-SIMS (chemical composition)</li><li>Raman spectroscopy (chemical composition)</li></ul></li><li><strong>Bulk Properties</strong>:<ul><li>Stress and strain (mechanical properties)</li><li>Shear stress and shear strain (mechanical properties)</li><li>Young’s modulus and shear modulus (mechanical properties)</li></ul></li></ul><h3 id="Surface-Contact-Angle"><a href="#Surface-Contact-Angle" class="headerlink" title="Surface Contact Angle"></a>Surface Contact Angle</h3><ul><li><strong>Definition</strong>: Measures the balance between cohesive forces (liquid molecules attracted to each other) and adhesive forces (liquid molecules attracted to the surface).</li><li><strong>Purpose</strong>: Directly measures surface wettability; indirectly probes surface energy, roughness, heterogeneity, contamination, and molecular mobility.</li><li><strong>Equation</strong>:<br>```latex<br>\gamma<em>{sl} = \gamma</em>{sv} + \gamma_{lv} \cos \theta</li><li><p>Where:</p><ul><li>(\gamma_{lv}): Liquid-vapor surface tension</li><li>(\gamma_{sl}): Interfacial tension between solid and liquid</li><li>(\gamma_{sv}): Surface energy of the solid</li><li>(\theta): Contact angle</li></ul></li></ul><h3 id="Scanning-Electron-Microscopy-SEM"><a href="#Scanning-Electron-Microscopy-SEM" class="headerlink" title="Scanning Electron Microscopy (SEM)"></a>Scanning Electron Microscopy (SEM)</h3><ul><li>Function: Uses a high-energy electron beam (5-100 keV) rastered on a specimen under vacuum.</li><li>Mechanism: Low-energy secondary electrons (1-20 eV) are emitted from impact points, with intensity depending on atomic composition and geometry.</li><li>Note: Insulating materials require metallic coating; images reflect the coating surface, not the underlying material.</li></ul><h3 id="SEM-Imaging"><a href="#SEM-Imaging" class="headerlink" title="SEM Imaging"></a>SEM Imaging</h3><p>Electrons Used: Secondary and backscattered electrons are used for SEM imaging.</p><h3 id="Electron-Solid-Interactions"><a href="#Electron-Solid-Interactions" class="headerlink" title="Electron-Solid Interactions"></a>Electron-Solid Interactions</h3><ul><li><p>Regions:</p><ul><li>Secondary Electron (SE): Produced wherever primary electrons go, but only those near the surface reach the SE detector for imaging.</li><li>Backscattered Electron (BSE): Produced with higher energy, travels farther than SE, provides better Z-contrast.</li><li>X-ray Region: Used for Energy-Dispersive X-ray Spectroscopy (EDX), travels farther than BSE, best for analytical purposes.</li></ul></li></ul><ul><li><p>Applications:</p><ul><li>SE: Best spatial resolution</li><li>BSE: Better Z-contrast</li><li>EDX: Best for elemental analysis</li></ul></li></ul><h3 id="X-ray-Photoelectron-Spectroscopy-XPS-ESCA"><a href="#X-ray-Photoelectron-Spectroscopy-XPS-ESCA" class="headerlink" title="X-ray Photoelectron Spectroscopy (XPS/ESCA)"></a>X-ray Photoelectron Spectroscopy (XPS/ESCA)</h3><ul><li><p>Mechanism: An X-ray photon ejects an electron from an atom’s inner shell (e.g., K shell). The kinetic energy of the ejected electron allows calculation of binding energy, identifying elements.</p></li><li><p>Applications :</p><ul><li>Identifies all elements except H and He (concentrations &gt;0.1%).</li><li>Semi-quantitative elemental surface composition (±10%).</li><li>Provides molecular environment details (oxidation state, bonding atoms).</li><li>Detects aromatic/unsaturated structures via shake-up transitions.</li><li>Identifies organic groups using derivatization reactions.</li><li>Non-destructive elemental depth profiles (~100 Å).</li><li>Destructive depth profiles (thousands of Å) using argon etching (for inorganics).</li><li>Lateral surface composition variations (spatial resolution 8-150 µm).</li><li>Fingerprinting materials using valence band spectra and bonding orbitals.</li><li>Studies on hydrated (frozen) surfaces.</li></ul></li></ul><h3 id="Time-of-Flight-Secondary-Ion-Mass-Spectrometry-TOF-SIMS"><a href="#Time-of-Flight-Secondary-Ion-Mass-Spectrometry-TOF-SIMS" class="headerlink" title="Time-of-Flight Secondary Ion Mass Spectrometry (TOF-SIMS)"></a>Time-of-Flight Secondary Ion Mass Spectrometry (TOF-SIMS)</h3><ul><li>Mechanism: Bombards surface with accelerated ions, ejecting secondary ions, radicals, excited states, and neutrals. Only secondary ions are measured.</li><li>Purpose: Analyzes elemental, isotopic, or molecular composition of the outermost 1-2 nm.</li></ul><h3 id="Static-SIMS-Uses-low-ion-doses-for-analysis"><a href="#Static-SIMS-Uses-low-ion-doses-for-analysis" class="headerlink" title="Static SIMS : Uses low ion doses for analysis."></a>Static SIMS : Uses low ion doses for analysis.</h3><h3 id="When-to-Use-EDX-ESCA-or-SIMS"><a href="#When-to-Use-EDX-ESCA-or-SIMS" class="headerlink" title="When to Use EDX, ESCA, or SIMS"></a>When to Use EDX, ESCA, or SIMS</h3><ul><li>EDX: For elemental composition of materials.</li><li>ESCA (XPS): For quantifying surface contamination, understanding electronic structure, or analyzing elemental/chemical states with good energy resolution.</li><li>SIMS: For high-sensitivity trace element detection, high-resolution surface imaging, or molecular composition analysis.</li></ul><h3 id="Raman-Spectroscopy"><a href="#Raman-Spectroscopy" class="headerlink" title="Raman Spectroscopy"></a>Raman Spectroscopy</h3><ul><li>Definition: Measures the energy difference (Raman shift) between incident and scattered light.</li><li>Spectrum: Vertical axis (intensity of scattered light), horizontal axis (wavenumber of Raman shift, cm⁻¹).</li><li><p>Example (Slide 41): Raman spectrum of tetrachloromethane (532 nm green laser):</p></li><li><p>Stokes scattering: Lower wavenumber (longer wavelength), typically used for analysis.</p></li><li>Anti-Stokes scattering: Higher wavenumber (shorter wavelength), also usable.</li></ul><h3 id="Surface-Enhanced-Raman-Spectroscopy-SERS"><a href="#Surface-Enhanced-Raman-Spectroscopy-SERS" class="headerlink" title="Surface-Enhanced Raman Spectroscopy (SERS)"></a>Surface-Enhanced Raman Spectroscopy (SERS)</h3><ul><li>Technique: Uses nanostructured metal surfaces (gold or silver) to amplify Raman scattering signals via localized surface plasmons, enabling ultra-sensitive detection (down to single-molecule level).</li></ul><h2 id="Bulk-Properties"><a href="#Bulk-Properties" class="headerlink" title="Bulk Properties"></a>Bulk Properties</h2><ul><li>Role: Dictate the ability to carry loads without undue deflection, premature failure, or degradation.</li><li><p>Properties:</p><ul><li>Mechanical (stress, strain, moduli)</li><li>Thermal (response to heat)</li><li>Optical (response to light)</li></ul></li></ul><ul><li><p>Categories (Slide 48):</p><ul><li>Intrinsic: Depend on composition (e.g., density, heat capacity, stiffness).</li><li>Extrinsic: Depend on microstructure (e.g., yield strength, optical/magnetic properties).</li></ul></li></ul><h3 id="Physical-Properties"><a href="#Physical-Properties" class="headerlink" title="Physical Properties"></a>Physical Properties</h3><p>Examples:</p><ul><li>Crystallinity</li><li>Thermal transition points (melting point (T_m), glass transition point (T_g))</li><li><p>Chemical composition</p></li><li><p>Impact: Chemical composition affects bulk properties, surface chemistry, and other characteristics.</p></li></ul><h3 id="Mechanical-Properties"><a href="#Mechanical-Properties" class="headerlink" title="Mechanical Properties"></a>Mechanical Properties</h3><ul><li>Purpose: Estimate behavior under mechanical loads (tension, compression, torsion, bending, cyclic loading, impact).</li><li>Influence: Highly affected by physical and chemical characteristics.</li></ul><h3 id="Tensile-Compressive-Testing"><a href="#Tensile-Compressive-Testing" class="headerlink" title="Tensile/Compressive Testing"></a>Tensile/Compressive Testing</h3><ul><li>Method: Applies uniaxial loading (tensile, compressive, or shear) at controlled amplitude and rate.</li><li>Setup: One end of the specimen is attached to a movable platform.</li></ul><h3 id="Compression-Testing"><a href="#Compression-Testing" class="headerlink" title="Compression Testing"></a>Compression Testing</h3><ul><li>Application: Common for biomaterials under compressive forces (e.g., orthopedic implants).</li><li>Specimen: Cylindrical, with length at least twice the diameter.</li><li>Calculation: Stress-strain calculated similarly to tensile tests, but values are negative.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lecture-2-Surface-and-Bulk-Properties-of-Biomaterials&quot;&gt;&lt;a href=&quot;#Lecture-2-Surface-and-Bulk-Properties-of-Biomaterials&quot; class=&quot;heade</summary>
      
    
    
    
    <category term="Education" scheme="https://victor999p.github.io/categories/Education/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/"/>
    
    <category term="Biomaterials(BME3123)" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/Biomaterials-BME3123/"/>
    
    
    <category term="Biomaterials" scheme="https://victor999p.github.io/tags/Biomaterials/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/tags/Biomedical-Engineering/"/>
    
    <category term="Lecture Notes" scheme="https://victor999p.github.io/tags/Lecture-Notes/"/>
    
  </entry>
  
  <entry>
    <title>ESP32-S3 與心跳和血氧測試</title>
    <link href="https://victor999p.github.io/posts/c2e18503.html"/>
    <id>https://victor999p.github.io/posts/c2e18503.html</id>
    <published>2025-10-01T02:00:00.000Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<details open>參考 NMKING- ESP32與MAX30102血氧感測    - by 小霸王實驗室in ESP32on Posted on2023/03/26https://www.nmking.io/index.php/2023/03/26/1071/<summary><b>MAX30102 血氧與心率感測器重點整理</b></summary><div class="note info">我們可以將 <b>MAX30102（脈搏血氧和心率感測器）</b> 連接到相同的 I2C 匯流排。MAX30102 是 I2C 裝置（預設地址 <code>0x57</code>），使用紅外線和紅光 LED 測量心率（BPM）和血氧飽和度（SpO2）。這適合 DIY 健康監測項目，但請注意：<b>這不是醫療級設備</b>，讀數受運動、指頭放置等影響，僅供學習用。</div><div class="note info">我們將使用 <b>SparkFun MAX3010x Sensor Library</b>（支援 MAX30102），它包含心率計算演算法。以下是完整指南，包括接線、庫安裝和基本範例程式碼（測量心率和 SpO2）。</div>**所需元件：**</details><pre><code>- ESP32-WROOM-32 開發板- MAX30102 模組（通常帶指夾或貼片）- 0.96 OLED SSD1106 推薦使用SSD1306- 杜邦線- USB 線（用於程式上傳）</code></pre><h1 id="ESP32-S3-入門：安裝環境與-Hello-World"><a href="#ESP32-S3-入門：安裝環境與-Hello-World" class="headerlink" title="ESP32-S3 入門：安裝環境與 Hello World"></a>ESP32-S3 入門：安裝環境與 Hello World</h1><p>ESP32-S3 是 Espressif 的旗艦 MCU，支援 Wi-Fi、Bluetooth 5.0 和 AI 加速，適合 IoT 專案。這篇記錄詳細說明如何安裝開發環境，並運行簡單的 Hello World 程式（LED 閃爍）。</p><h2 id="步驟-1-硬體準備"><a href="#步驟-1-硬體準備" class="headerlink" title="步驟 1: 硬體準備"></a>步驟 1: 硬體準備</h2><ul><li><strong>開發板</strong>：推薦 ESP32-S3-DevKitC-1（約 NT$300）。</li><li><strong>工具</strong>：USB 線、電腦（Windows/Mac/Linux）。</li><li><strong>連接</strong>：USB 連接到電腦，確認驅動程式（CP210x 或 CH340）已安裝。</li></ul><p><image-card alt="ESP32-S3 開發板" src="https://docs.espressif.com/projects/esp-idf/en/latest/esp32s3/_images/esp32-s3-devkitc-1-v1-00-front.jpg" >&lt;/image-card&gt;<br><em>(圖片來源：Espressif 官方文件)</em></p><h2 id="步驟-2-安裝-Arduino-IDE"><a href="#步驟-2-安裝-Arduino-IDE" class="headerlink" title="步驟 2: 安裝 Arduino IDE"></a>步驟 2: 安裝 Arduino IDE</h2><ol><li>下載 Arduino IDE 2.x：<a href="https://www.arduino.cc/en/software">Arduino 官網</a>。</li><li>在 <strong>檔案 &gt; 偏好設定</strong> 添加 ESP32 板子 URL：</li><li>在 <strong>工具 &gt; 板子 &gt; 板子管理員</strong> 搜尋 “ESP32”，安裝 Espressif 的 ESP32 套件（v2.0.3+ 支援 S3）。</li><li>選擇板子：<strong>工具 &gt; 板子 &gt; ESP32 Arduino &gt; ESP32S3 Dev Module</strong>。</li></ol><h2 id="步驟-3-程式碼範例-Hello-World"><a href="#步驟-3-程式碼範例-Hello-World" class="headerlink" title="步驟 3: 程式碼範例 - Hello World!"></a>步驟 3: 程式碼範例 - Hello World!</h2><p>簡單測試Esp32, 以下是程式碼：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Serial.<span class="built_in">println</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="步驟-4-與MAX30102-和-SSD1106-OLED-的整合"><a href="#步驟-4-與MAX30102-和-SSD1106-OLED-的整合" class="headerlink" title="步驟 4: 與MAX30102 和 SSD1106 OLED 的整合"></a>步驟 4: 與MAX30102 和 SSD1106 OLED 的整合</h2><ul><li>目標<ul><li>使用 ESP32-WROOM-32 將 MAX30102 脈搏血氧感測器和 SSD1306 OLED 顯示器（128x64，I2C 介面）連接到一起，並在 OLED 上顯示心率（BPM）和血氧飽和度（SpO2），使用 Adafruit SSD1306 函式庫的 println 方法輸出英文文字（例如 “Heart Rate: [BPM]” 和 “SpO2: [SpO2]%”）。un</li></ul></li></ul><h3 id="程式碼解釋"><a href="#程式碼解釋" class="headerlink" title="程式碼解釋"></a>程式碼解釋</h3><h4 id="1-硬體連線"><a href="#1-硬體連線" class="headerlink" title="1. 硬體連線"></a>1. 硬體連線</h4><pre><code>- SSD1306 OLED 和 MAX30102 共用 I2C 匯流排，連接到 ESP32 的 GPIO16 (SDA) 和 GPIO17 (SCL)。- 電源使用 3.3V。- 連線表如下：</code></pre><div class="table-container"><table><thead><tr><th>設備</th><th>引腳</th><th>ESP32 引腳</th><th>描述</th></tr></thead><tbody><tr><td>SSD1106 OLED</td><td>VCC</td><td>3.3V</td><td>電源（3.3V）</td></tr><tr><td></td><td>GND</td><td>GND</td><td>接地</td></tr><tr><td></td><td>SCL</td><td>GPIO17</td><td>I2C 時鐘線</td></tr><tr><td></td><td>SDA</td><td>GPIO16</td><td>I2C 資料線</td></tr><tr><td>MAX30102</td><td>VIN</td><td>3.3V</td><td>電源（3.3V）</td></tr><tr><td></td><td>GND</td><td>GND</td><td>接地（共用）</td></tr><tr><td></td><td>SCL</td><td>GPIO17</td><td>I2C 時鐘線（共用）</td></tr><tr><td></td><td>SDA</td><td>GPIO16</td><td>I2C 資料線（共用）</td></tr><tr><td></td><td>INT</td><td>未連接</td><td>中斷引腳（可選）</td></tr></tbody></table></div><ul><li>注意：<ul><li>確保所有設備共用 GND（接地）。</li><li>如果 I2C NACK 錯誤持續發生，請在 SDA (GPIO16) 和 SCL (GPIO17) 各接一個 4.7kΩ 上拉電阻到 3.3V。部分模組內建上拉電阻，但外部電阻通常能提高穩定性。</li><li>使用短杜邦線以減少信號干擾。</li><li>MAX30102 測量時，手指需完全覆蓋感測器，避免移動或環境光干擾。</li></ul></li></ul><h4 id="2-程式碼結構"><a href="#2-程式碼結構" class="headerlink" title="2. 程式碼結構"></a>2. 程式碼結構</h4><p><strong>使用說明</strong><br>OLED屏幕測試：<br>    線路連接：</p><pre><code>- GND =&gt; GND- 3V3 =&gt; VCC- IO16 =&gt; SDA- IO17 =&gt; SCL</code></pre><p><img src="/img/esp32/esp32_hw.jpg" alt="ESP32 硬體連線示意圖"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Wire.h&gt;</span><br><span class="line">#include &lt;Adafruit_GFX.h&gt;</span><br><span class="line">#include &lt;Adafruit_SSD1306.h&gt;</span><br><span class="line"></span><br><span class="line">#define SCREEN_WIDTH 128  // OLED寬度（像素）</span><br><span class="line">#define SCREEN_HEIGHT 64  // OLED高度（像素）</span><br><span class="line">#define OLED_RESET -1     // 重置引腳（未使用，設為-1）</span><br><span class="line">// GND =&gt; GND</span><br><span class="line">// 3V3 =&gt; VCC</span><br><span class="line">//IO16 =&gt; SDA</span><br><span class="line">//IO17 =&gt;SCL</span><br><span class="line">// 創建顯示器物件，I2C地址為0x3C</span><br><span class="line">Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET);</span><br><span class="line"></span><br><span class="line">void setup() &#123;</span><br><span class="line">  Serial.begin(115200);  // 用於除錯</span><br><span class="line"></span><br><span class="line">  // 初始化I2C，使用自訂引腳（SDA=16, SCL=17）</span><br><span class="line">  Wire.begin(16, 17);</span><br><span class="line"></span><br><span class="line">  // 初始化顯示器</span><br><span class="line">  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) &#123;</span><br><span class="line">    Serial.println(F(&quot;SSD1306初始化失敗&quot;));</span><br><span class="line">    for (;;);  // 初始化失敗則停止</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 清空顯示緩衝區</span><br><span class="line">  display.clearDisplay();</span><br><span class="line">  display.setTextSize(2);           // 設置文字大小</span><br><span class="line">  display.setTextColor(SSD1306_WHITE);  // 設置文字顏色為白色</span><br><span class="line">  display.setCursor(0, 0);         // 從左上角開始</span><br><span class="line">  display.println(&quot;Hello world!&quot;);  // 顯示中文文字</span><br><span class="line">  display.display();               // 輸出到螢幕</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void loop() &#123;</span><br><span class="line">  // 空迴圈；可在此添加動態更新程式碼</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源代碼修改：  </p><ul><li>添加 <code>Wire.begin(16, 17);</code> 和 <code>Wire.setClock(100000);</code>  </li><li>移除所有蜂鳴器相關程式碼  </li><li>添加初始化除錯訊息  </li><li>確保與 Adafruit SSD1306 (2.4.6) 和 SparkFun MAX3010x 相容  </li><li>驗證函式庫版本：<ul><li>Adafruit SSD1306: 2.4.6</li><li>Adafruit GFX: 1.10.12</li><li>SparkFun MAX3010x: 任意版本（包含 heartRate.h）</li></ul></li></ul><p>上傳程式碼：</p><ol><li>在 Arduino IDE 中選擇 ESP32 Dev Module 和正確的序列埠。</li><li>上傳上述程式碼。</li></ol><p>檢查序列監視器：</p><ol><li>打開序列監視器（115200 波特率），確認初始化訊息（例如 “SSD1306 初始化成功”）。</li><li>觀察 BPM 和 SpO2 輸出。</li></ol><p>測試感測器：</p><ol><li>將手指輕放在 MAX30102 感測器上（完全覆蓋，避免移動）。</li><li>等待 5-10 秒，OLED 應顯示心跳圖示、”[BPM] BPM” 和氧氣圖示、”[SpO2]%”（若 BPM &gt; 30）。</li><li>若無手指，OLED 顯示 “Finger Please”。</li></ol><p>預期輸出：</p><ul><li>正常成人 BPM：60-100。</li><li>正常 SpO2：95-100%。</li><li>序列監視器顯示類似：<code>Bpm: 75, SpO2: 98.5</code></li></ul><hr><h4 id="3-問題排查"><a href="#3-問題排查" class="headerlink" title="3. 問題排查"></a>3. 問題排查</h4><p><strong>無心率或血氧讀數：</strong></p><ul><li>確保手指正確放置（輕壓，無環境光干擾）。</li><li>調整 ledBrightness（試 50-127，例如 <code>particleSensor.setup(50, ...)</code>）。</li><li>檢查序列監視器：IR &lt; 7000 表示未偵測到手指。</li><li>血氧可能需 30 次採樣（Num）穩定。</li></ul><p><strong>OLED 無顯示或亂碼：</strong></p><ul><li>若無顯示，嘗試 I2C 地址 0x3D（修改 <code>display.begin(SSD1306_SWITCHCAPVCC, 0x3D)</code>）。</li><li>若使用 128x32 OLED，修改 <code>SCREEN_HEIGHT</code> 為 32。</li><li>單獨測試 OLED（使用 artifact ID: e69fa0ab-7c18-4349-a8a4-5ac22e61b0ef 的程式碼）。</li></ul><p><strong>血氧不準確：</strong></p><ul><li>當前公式（<code>SpO2 = -23.3 * (R - 0.4) + 120</code>）為簡化版。若需更高精度，可使用 SparkFun 的 Example6_SPO2（包含 spo2_algorithm.h）。</li><li>確保 <code>ledMode = 2</code>（紅光+紅外線）。</li></ul><hr><p><img src="/img/esp32/esp32_bpm_spo.jpg" alt="ESP32 BPM/SpO2 示意圖"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Adafruit_GFX.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Adafruit_SSD1306.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MAX30105.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;heartRate.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_WIDTH 128 <span class="comment">// OLED 寬度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SCREEN_HEIGHT 64 <span class="comment">// OLED 高度</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_RESET -1 <span class="comment">// 重置引腳</span></span></span><br><span class="line"><span class="function">Adafruit_SSD1306 <span class="title">display</span><span class="params">(SCREEN_WIDTH, SCREEN_HEIGHT, &amp;Wire, OLED_RESET)</span></span>; <span class="comment">// 初始化 OLED</span></span><br><span class="line"></span><br><span class="line">MAX30105 particleSensor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 心率變數</span></span><br><span class="line"><span class="type">const</span> byte RATE_SIZE = <span class="number">4</span>; <span class="comment">// 平均樣本數</span></span><br><span class="line">byte rates[RATE_SIZE]; <span class="comment">// 心率陣列</span></span><br><span class="line">byte rateSpot = <span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> lastBeat = <span class="number">0</span>; <span class="comment">// 上次心跳時間</span></span><br><span class="line"><span class="type">float</span> beatsPerMinute;</span><br><span class="line"><span class="type">int</span> beatAvg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 血氧變數</span></span><br><span class="line"><span class="type">double</span> avered = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> aveir = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> sumirrms = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> sumredrms = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> SpO2 = <span class="number">0</span>;</span><br><span class="line"><span class="type">double</span> ESpO2 = <span class="number">60.0</span>; <span class="comment">// 初始血氧估計值</span></span><br><span class="line"><span class="type">double</span> FSpO2 = <span class="number">0.7</span>; <span class="comment">// 血氧濾波因子</span></span><br><span class="line"><span class="type">double</span> frate = <span class="number">0.95</span>; <span class="comment">// 紅光/紅外線低通濾波</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> Num = <span class="number">30</span>; <span class="comment">// 每 30 次採樣計算一次</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FINGER_ON 7000 <span class="comment">// 手指偵測紅外線最小值</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MINIMUM_SPO2 60.0 <span class="comment">// 血氧最小值</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小心跳圖示</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> PROGMEM logo2_bmp[] =</span><br><span class="line">&#123; <span class="number">0x03</span>, <span class="number">0xC0</span>, <span class="number">0xF0</span>, <span class="number">0x06</span>, <span class="number">0x71</span>, <span class="number">0x8C</span>, <span class="number">0x0C</span>, <span class="number">0x1B</span>, <span class="number">0x06</span>, <span class="number">0x18</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x10</span>, <span class="number">0x0C</span>, <span class="number">0x03</span>, <span class="number">0x10</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0x40</span>, <span class="number">0x01</span>, <span class="number">0x10</span>, <span class="number">0xC0</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x88</span>,</span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0xB8</span>, <span class="number">0x04</span>, <span class="number">0xFF</span>, <span class="number">0x37</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x30</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x90</span>, <span class="number">0x30</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x60</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x31</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x1B</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x04</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大心跳圖示</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> PROGMEM logo3_bmp[] =</span><br><span class="line">&#123; <span class="number">0x01</span>, <span class="number">0xF0</span>, <span class="number">0x0F</span>, <span class="number">0x80</span>, <span class="number">0x06</span>, <span class="number">0x1C</span>, <span class="number">0x38</span>, <span class="number">0x60</span>, <span class="number">0x18</span>, <span class="number">0x06</span>, <span class="number">0x60</span>, <span class="number">0x18</span>, <span class="number">0x10</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0x20</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x04</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x02</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x03</span>,</span><br><span class="line">  <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x18</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x1C</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x14</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x10</span>, <span class="number">0x12</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x10</span>, <span class="number">0x12</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x7E</span>, <span class="number">0x1F</span>, <span class="number">0x23</span>, <span class="number">0xFE</span>, <span class="number">0x03</span>, <span class="number">0x31</span>, <span class="number">0xA0</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0xA0</span>, <span class="number">0xA0</span>, <span class="number">0x08</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0xE0</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x20</span>, <span class="number">0x60</span>, <span class="number">0x20</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0x60</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x40</span>, <span class="number">0xC0</span>,</span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0xC0</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x60</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x30</span>, <span class="number">0x0C</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, <span class="number">0x60</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x03</span>, <span class="number">0xC0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x80</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 氧氣圖示</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> PROGMEM O2_bmp[] = &#123;</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0xf0</span>, <span class="number">0x00</span>, <span class="number">0x3f</span>, <span class="number">0xc3</span>, <span class="number">0xf8</span>, <span class="number">0x00</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xfc</span>,</span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xfe</span>, <span class="number">0x07</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xfe</span>, <span class="number">0x0f</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xfe</span>, <span class="number">0x0f</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0x7e</span>,</span><br><span class="line">  <span class="number">0x1f</span>, <span class="number">0x80</span>, <span class="number">0xff</span>, <span class="number">0xfc</span>, <span class="number">0x1f</span>, <span class="number">0x00</span>, <span class="number">0x7f</span>, <span class="number">0xb8</span>, <span class="number">0x3e</span>, <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0xb0</span>, <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0x3f</span>, <span class="number">0xc0</span>,</span><br><span class="line">  <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0x1f</span>, <span class="number">0xc0</span>, <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0x1f</span>, <span class="number">0xc0</span>, <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0x1f</span>, <span class="number">0xc0</span>, <span class="number">0x3e</span>, <span class="number">0x3e</span>, <span class="number">0x2f</span>, <span class="number">0xc0</span>,</span><br><span class="line">  <span class="number">0x3e</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x80</span>, <span class="number">0x1f</span>, <span class="number">0x1c</span>, <span class="number">0x2f</span>, <span class="number">0x80</span>, <span class="number">0x1f</span>, <span class="number">0x80</span>, <span class="number">0xcf</span>, <span class="number">0x80</span>, <span class="number">0x1f</span>, <span class="number">0xe3</span>, <span class="number">0x9f</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0f</span>, <span class="number">0xff</span>, <span class="number">0x3f</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0xfe</span>, <span class="number">0xfe</span>, <span class="number">0x00</span>, <span class="number">0x0b</span>, <span class="number">0xfe</span>, <span class="number">0x0c</span>, <span class="number">0x00</span>, <span class="number">0x1d</span>, <span class="number">0xff</span>, <span class="number">0xf8</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x1e</span>, <span class="number">0xff</span>, <span class="number">0xe0</span>, <span class="number">0x00</span>, <span class="number">0x1f</span>, <span class="number">0xff</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1f</span>, <span class="number">0xf0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x1f</span>, <span class="number">0xe0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>,</span><br><span class="line">  <span class="number">0x0f</span>, <span class="number">0xe0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x80</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;系統啟動&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 I2C (SDA=16, SCL=17)</span></span><br><span class="line">  Wire.<span class="built_in">begin</span>(<span class="number">16</span>, <span class="number">17</span>);</span><br><span class="line">  Wire.<span class="built_in">setClock</span>(<span class="number">100000</span>); <span class="comment">// 100kHz 穩定性</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 OLED</span></span><br><span class="line">  <span class="keyword">if</span> (!display.<span class="built_in">begin</span>(SSD1306_SWITCHCAPVCC, <span class="number">0x3C</span>)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="built_in">F</span>(<span class="string">&quot;SSD1306 初始化失敗！&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (;;); <span class="comment">// 初始化失敗則停止</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;SSD1306 初始化成功&quot;</span>);</span><br><span class="line">  display.<span class="built_in">clearDisplay</span>();</span><br><span class="line">  display.<span class="built_in">display</span>();</span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化 MAX30102</span></span><br><span class="line">  <span class="keyword">if</span> (!particleSensor.<span class="built_in">begin</span>(Wire, I2C_SPEED_FAST)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;找不到 MAX30102！請檢查連線。&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;); <span class="comment">// 初始化失敗則停止</span></span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;MAX30102 初始化成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置 MAX30102</span></span><br><span class="line">  byte ledBrightness = <span class="number">0x7F</span>; <span class="comment">// 亮度: 127 (0=關閉, 255=50mA)</span></span><br><span class="line">  byte sampleAverage = <span class="number">4</span>; <span class="comment">// 平均樣本數: 1, 2, 4, 8, 16, 32</span></span><br><span class="line">  byte ledMode = <span class="number">2</span>; <span class="comment">// 模式: 2 (紅光+紅外線，用於血氧)</span></span><br><span class="line">  <span class="type">int</span> sampleRate = <span class="number">800</span>; <span class="comment">// 採樣率: 50, 100, 200, 400, 800, 1000, 1600, 3200</span></span><br><span class="line">  <span class="type">int</span> pulseWidth = <span class="number">215</span>; <span class="comment">// 脈寬: 69, 118, 215, 411</span></span><br><span class="line">  <span class="type">int</span> adcRange = <span class="number">16384</span>; <span class="comment">// ADC範圍: 2048, 4096, 8192, 16384</span></span><br><span class="line">  particleSensor.<span class="built_in">setup</span>(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);</span><br><span class="line">  particleSensor.<span class="built_in">enableDIETEMPRDY</span>();</span><br><span class="line">  particleSensor.<span class="built_in">setPulseAmplitudeRed</span>(<span class="number">0x0A</span>); <span class="comment">// 低紅光 LED 表示感測器運行</span></span><br><span class="line">  particleSensor.<span class="built_in">setPulseAmplitudeGreen</span>(<span class="number">0</span>); <span class="comment">// 禁用綠光 LED</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">long</span> irValue = particleSensor.<span class="built_in">getIR</span>(); <span class="comment">// 讀取紅外線值以檢測手指</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (irValue &gt; FINGER_ON) &#123;</span><br><span class="line">    <span class="comment">// 檢查心跳</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">checkForBeat</span>(irValue) == <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="comment">// 顯示心跳動畫</span></span><br><span class="line">      display.<span class="built_in">clearDisplay</span>();</span><br><span class="line">      display.<span class="built_in">drawBitmap</span>(<span class="number">0</span>, <span class="number">0</span>, logo3_bmp, <span class="number">32</span>, <span class="number">32</span>, WHITE); <span class="comment">// 大心跳圖示</span></span><br><span class="line">      display.<span class="built_in">setTextSize</span>(<span class="number">2</span>);</span><br><span class="line">      display.<span class="built_in">setTextColor</span>(SSD1306_WHITE);</span><br><span class="line">      display.<span class="built_in">setCursor</span>(<span class="number">42</span>, <span class="number">10</span>);</span><br><span class="line">      display.<span class="built_in">print</span>(beatAvg);</span><br><span class="line">      display.<span class="built_in">println</span>(<span class="string">&quot; BPM&quot;</span>);</span><br><span class="line">      display.<span class="built_in">drawBitmap</span>(<span class="number">0</span>, <span class="number">35</span>, O2_bmp, <span class="number">32</span>, <span class="number">32</span>, WHITE); <span class="comment">// 氧氣圖示</span></span><br><span class="line">      display.<span class="built_in">setCursor</span>(<span class="number">42</span>, <span class="number">40</span>);</span><br><span class="line">      <span class="keyword">if</span> (beatAvg &gt; <span class="number">30</span>) display.<span class="built_in">print</span>(<span class="built_in">String</span>(ESpO2) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">      <span class="keyword">else</span> display.<span class="built_in">print</span>(<span class="string">&quot;---- %&quot;</span>);</span><br><span class="line">      display.<span class="built_in">display</span>();</span><br><span class="line"></span><br><span class="line">      <span class="type">long</span> delta = <span class="built_in">millis</span>() - lastBeat;</span><br><span class="line">      lastBeat = <span class="built_in">millis</span>();</span><br><span class="line">      beatsPerMinute = <span class="number">60</span> / (delta / <span class="number">1000.0</span>);</span><br><span class="line">      <span class="keyword">if</span> (beatsPerMinute &lt; <span class="number">255</span> &amp;&amp; beatsPerMinute &gt; <span class="number">20</span>) &#123;</span><br><span class="line">        rates[rateSpot++] = (byte)beatsPerMinute;</span><br><span class="line">        rateSpot %= RATE_SIZE;</span><br><span class="line">        beatAvg = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (byte x = <span class="number">0</span>; x &lt; RATE_SIZE; x++) beatAvg += rates[x];</span><br><span class="line">        beatAvg /= RATE_SIZE;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 計算血氧</span></span><br><span class="line">    <span class="type">uint32_t</span> ir, red;</span><br><span class="line">    <span class="type">double</span> fred, fir;</span><br><span class="line">    particleSensor.<span class="built_in">check</span>(); <span class="comment">// 讀取最多 3 個樣本</span></span><br><span class="line">    <span class="keyword">if</span> (particleSensor.<span class="built_in">available</span>()) &#123;</span><br><span class="line">      i++;</span><br><span class="line">      ir = particleSensor.<span class="built_in">getFIFOIR</span>(); <span class="comment">// 讀取紅外線</span></span><br><span class="line">      red = particleSensor.<span class="built_in">getFIFORed</span>(); <span class="comment">// 讀取紅光</span></span><br><span class="line">      fir = (<span class="type">double</span>)ir;</span><br><span class="line">      fred = (<span class="type">double</span>)red;</span><br><span class="line">      aveir = aveir * frate + fir * (<span class="number">1.0</span> - frate); <span class="comment">// 紅外線低通濾波</span></span><br><span class="line">      avered = avered * frate + fred * (<span class="number">1.0</span> - frate); <span class="comment">// 紅光低通濾波</span></span><br><span class="line">      sumirrms += (fir - aveir) * (fir - aveir); <span class="comment">// 紅外線交流成分平方和</span></span><br><span class="line">      sumredrms += (fred - avered) * (fred - avered); <span class="comment">// 紅光交流成分平方和</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((i % Num) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">double</span> R = (<span class="built_in">sqrt</span>(sumirrms) / aveir) / (<span class="built_in">sqrt</span>(sumredrms) / avered);</span><br><span class="line">        SpO2 = <span class="number">-23.3</span> * (R - <span class="number">0.4</span>) + <span class="number">120</span>;</span><br><span class="line">        ESpO2 = FSpO2 * ESpO2 + (<span class="number">1.0</span> - FSpO2) * SpO2; <span class="comment">// 低通濾波</span></span><br><span class="line">        <span class="keyword">if</span> (ESpO2 &lt;= MINIMUM_SPO2) ESpO2 = MINIMUM_SPO2;</span><br><span class="line">        <span class="keyword">if</span> (ESpO2 &gt; <span class="number">100</span>) ESpO2 = <span class="number">99.9</span>;</span><br><span class="line">        sumredrms = <span class="number">0.0</span>; sumirrms = <span class="number">0.0</span>; SpO2 = <span class="number">0</span>;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      particleSensor.<span class="built_in">nextSample</span>(); <span class="comment">// 移至下一個樣本</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 輸出到序列監視器</span></span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Bpm: &quot;</span> + <span class="built_in">String</span>(beatAvg));</span><br><span class="line">    <span class="keyword">if</span> (beatAvg &gt; <span class="number">30</span>) Serial.<span class="built_in">println</span>(<span class="string">&quot;, SpO2: &quot;</span> + <span class="built_in">String</span>(ESpO2));</span><br><span class="line">    <span class="keyword">else</span> Serial.<span class="built_in">println</span>(<span class="string">&quot;, SpO2: ----&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 OLED 穩定顯示</span></span><br><span class="line">    display.<span class="built_in">clearDisplay</span>();</span><br><span class="line">    display.<span class="built_in">drawBitmap</span>(<span class="number">5</span>, <span class="number">5</span>, logo2_bmp, <span class="number">24</span>, <span class="number">21</span>, WHITE); <span class="comment">// 小心跳圖示</span></span><br><span class="line">    display.<span class="built_in">setTextSize</span>(<span class="number">2</span>);</span><br><span class="line">    display.<span class="built_in">setTextColor</span>(SSD1306_WHITE);</span><br><span class="line">    display.<span class="built_in">setCursor</span>(<span class="number">42</span>, <span class="number">10</span>);</span><br><span class="line">    display.<span class="built_in">print</span>(beatAvg);</span><br><span class="line">    display.<span class="built_in">println</span>(<span class="string">&quot; BPM&quot;</span>);</span><br><span class="line">    display.<span class="built_in">drawBitmap</span>(<span class="number">0</span>, <span class="number">35</span>, O2_bmp, <span class="number">32</span>, <span class="number">32</span>, WHITE); <span class="comment">// 氧氣圖示</span></span><br><span class="line">    display.<span class="built_in">setCursor</span>(<span class="number">42</span>, <span class="number">40</span>);</span><br><span class="line">    <span class="keyword">if</span> (beatAvg &gt; <span class="number">30</span>) display.<span class="built_in">print</span>(<span class="built_in">String</span>(ESpO2) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> display.<span class="built_in">print</span>(<span class="string">&quot;---- %&quot;</span>);</span><br><span class="line">    display.<span class="built_in">display</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 未偵測到手指，重置數據並顯示提示</span></span><br><span class="line">    <span class="keyword">for</span> (byte rx = <span class="number">0</span>; rx &lt; RATE_SIZE; rx++) rates[rx] = <span class="number">0</span>;</span><br><span class="line">    beatAvg = <span class="number">0</span>; rateSpot = <span class="number">0</span>; lastBeat = <span class="number">0</span>;</span><br><span class="line">    avered = <span class="number">0</span>; aveir = <span class="number">0</span>; sumirrms = <span class="number">0</span>; sumredrms = <span class="number">0</span>;</span><br><span class="line">    SpO2 = <span class="number">0</span>; ESpO2 = <span class="number">90.0</span>;</span><br><span class="line">    display.<span class="built_in">clearDisplay</span>();</span><br><span class="line">    display.<span class="built_in">setTextSize</span>(<span class="number">2</span>);</span><br><span class="line">    display.<span class="built_in">setTextColor</span>(SSD1306_WHITE);</span><br><span class="line">    display.<span class="built_in">setCursor</span>(<span class="number">30</span>, <span class="number">5</span>);</span><br><span class="line">    display.<span class="built_in">println</span>(<span class="string">&quot;Finger&quot;</span>);</span><br><span class="line">    display.<span class="built_in">setCursor</span>(<span class="number">30</span>, <span class="number">35</span>);</span><br><span class="line">    display.<span class="built_in">println</span>(<span class="string">&quot;Please&quot;</span>);</span><br><span class="line">    display.<span class="built_in">display</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="未來計劃"><a href="#未來計劃" class="headerlink" title="未來計劃"></a>未來計劃</h2><ul><li>圖表展示</li><li>記錄數據。</li><li>使用 AI 模型（如簡單神經網路）檢測心律不整 [使用 TensorFlow Lite 載入預訓練模型（例如簡單 MLP 模型）檢測異常。]</li></ul>]]></content>
    
    
    <summary type="html">這是 ESP32-S3 的第一篇操作記錄，從環境設定到 LED 閃爍的完整步驟。</summary>
    
    
    
    <category term="硬體操作" scheme="https://victor999p.github.io/categories/%E7%A1%AC%E9%AB%94%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="ESP32-S3" scheme="https://victor999p.github.io/tags/ESP32-S3/"/>
    
    <category term="Arduino" scheme="https://victor999p.github.io/tags/Arduino/"/>
    
    <category term="入門" scheme="https://victor999p.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>Biomaterials-1 | 生物材料-1</title>
    <link href="https://victor999p.github.io/posts/d1e61a5b.html"/>
    <id>https://victor999p.github.io/posts/d1e61a5b.html</id>
    <published>2025-09-07T16:00:00.000Z</published>
    <updated>2025-10-01T09:54:21.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lecture-1-History-Definition-and-Outline"><a href="#Lecture-1-History-Definition-and-Outline" class="headerlink" title="Lecture 1: History, Definition, and Outline"></a>Lecture 1: History, Definition, and Outline</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><ul><li><strong>Title</strong>: Materials for Biomedical Engineering</li><li><strong>Subtitle</strong>: Lecture 1: History, Definition, and Outline</li></ul><h2 id="Lecture-Outline"><a href="#Lecture-Outline" class="headerlink" title="Lecture Outline"></a>Lecture Outline</h2><ul><li><strong>Topics Covered</strong>:<ul><li>1.Definition of Biomaterials</li><li>2.Characteristics of four generations</li><li>3.Major market shares</li><li>4.Requirements of biomaterials</li><li>5.Major types and their pros and cons</li><li>6.Forces in biomaterials</li><li>7.Three aspects in biomaterials</li><li>8.Restenosis</li><li>9.Need of selection and processing of biomaterials</li></ul></li></ul><h1 id="Definition-of-Biomaterials"><a href="#Definition-of-Biomaterials" class="headerlink" title="Definition of Biomaterials"></a>Definition of Biomaterials</h1><ul><li><p><strong>Definition</strong>: Biomaterials are materials suitable for making devices to replace a part or function of the body in a safe, reliable, economic, and physiologically acceptable manner.</p></li><li><p><strong>Historical Context</strong>: The use of biomaterials dates back a long time, but the notion of biomaterials science emerged in the 1960s.</p></li></ul><p>The definition, though initially restricted, is continually improved and provides an overview of goals, needs, and potential applications.</p><h3 id="Clinical-Needs-for-Biomaterials"><a href="#Clinical-Needs-for-Biomaterials" class="headerlink" title="Clinical Needs for Biomaterials"></a>Clinical Needs for Biomaterials</h3><p>Stems from inability to treat many diseases, injuries, and conditions:</p><ul><li>Replacement of other therapy parts or procedures (total hip)</li><li>Correct abnormalities (spinal cord)</li><li>Improve function (pacemaker, stent)</li><li>Structural, pharmaceutical effects: sutures, drug release</li></ul><h1 id="Characteristics-of-four-generation"><a href="#Characteristics-of-four-generation" class="headerlink" title="Characteristics of four generation"></a>Characteristics of four generation</h1><div class="timeline blue"><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Generation of Biomaterials</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>1st-Generation</p></div>        </div>        <div class='timeline-item-content'><p><strong>First Generation</strong>:</p><ul><li>Restricted to materials available in the <mark class="hl-label blue">natura-environment</mark>.</li><li>Used to simply repair organs.</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2nd-Generation</p></div>        </div>        <div class='timeline-item-content'><p> <strong>Second Generation</strong>:</p><ul><li>Spans a long period, starting with improvements in human knowledge and ending in the mid-20th century.</li><li>Benefited from the  <mark class="hl-label blue">Industrial-Revolution</mark>.</li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>3rd-Generation</p></div>        </div>        <div class='timeline-item-content'><ul><li><strong>Third Generation</strong>:<ul><li>Began with the <mark class="hl-label blue">birth-of-polymers</mark> as promising materials.</li><li>Built on scientific advancements in materials and their transformation, as well as understanding of living systems.</li></ul></li></ul></div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>now</p></div>        </div>        <div class='timeline-item-content'><ul><li><strong>Fourth Generation</strong>:<ul><li>Currently in its early stages.</li><li>Combines “dreams and realities” with assistance from <mark class="hl-label blue">artificial-intelligence</mark> (AI).</li></ul></li></ul></div>      </div></div><h2 id="First-Generation-Example"><a href="#First-Generation-Example" class="headerlink" title="First Generation Example:"></a>First Generation Example:</h2><ul><li><strong>Etruscan Dental Bridge</strong>: Gold was one of the earliest biomaterials used in ancient civilizations.</li><li><strong>Oldest Known Prosthesis</strong>: A replacement for the right big toe found in a mummy from the necropolis of Thebes (circa 3,000 years ago).</li><li><strong>Burn Treatment</strong>: Use of tilapia skin for burns victims.<h3 id="Fish-Skin-Treatment"><a href="#Fish-Skin-Treatment" class="headerlink" title="Fish Skin Treatment"></a>Fish Skin Treatment</h3></li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">Pros</th><th style="text-align:left">Cons</th></tr></thead><tbody><tr><td style="text-align:left">Cost</td><td style="text-align:left">Process</td></tr><tr><td style="text-align:left">Biocompatible &amp; biodegradable</td><td style="text-align:left">Bacterial/pathogen risk</td></tr><tr><td style="text-align:left">Ethics</td><td style="text-align:left">Immune response</td></tr><tr><td style="text-align:left">Supply</td><td style="text-align:left">/</td></tr><tr><td style="text-align:left">Non-toxic</td><td style="text-align:left">/</td></tr></tbody></table></div><h3 id="🔥-Burn-Classification-Table"><a href="#🔥-Burn-Classification-Table" class="headerlink" title="🔥 Burn Classification Table"></a>🔥 Burn Classification Table</h3><div class="table-container"><table><thead><tr><th>Damages / Symptoms</th><th style="text-align:center">First-Degree Burn</th><th style="text-align:center">Second-Degree Burn (Partial Thickness)</th><th style="text-align:center">Third-Degree Burn (Full Thickness)</th></tr></thead><tbody><tr><td>Damages epidermis (outer layer of skin)</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td>Damages dermis layer</td><td style="text-align:center"></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td>Damages tendons, bones</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr><tr><td>Reddens skin</td><td style="text-align:center">✓</td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td>Blisters</td><td style="text-align:center"></td><td style="text-align:center">✓</td><td style="text-align:center"></td></tr><tr><td>Pain / white or black discoloration</td><td style="text-align:center"></td><td style="text-align:center">✓</td><td style="text-align:center">✓</td></tr><tr><td>Damages nerve endings</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✓</td></tr></tbody></table></div><h2 id="Second-Generation-Example"><a href="#Second-Generation-Example" class="headerlink" title="Second Generation Example"></a>Second Generation Example</h2><ul><li><strong>The Glass Eye</strong><ul><li><strong>CREATE By</strong> French surgeon <strong>Ambroise Paré (1510-90)</strong> could have laid claim to be the father of facial prosthetics. He was the first to describe the use of artificial eyes and constructed them from enameled gold, silver, porcelain and glass.</li><li>The Glass Eye. The first known Ocularist, constructing artificial eyes from glass during the golden age of Italian glassmaking, came out of Venice in the 16th century. By the 19th century Europe was acknowledged as a centre of excellence in artistic craftsmanship, and Germany became the centre for glass eye production.</li></ul></li></ul><h2 id="Third-Generation-Example"><a href="#Third-Generation-Example" class="headerlink" title="Third Generation Example"></a>Third Generation Example</h2><ul><li><p><strong>Acrylic Artificial Eye</strong> (US &amp; UK in 2nd WW): the advantages of this material (resistance to scratches, breakage and attack by lacrimal secretions) made it lighter.<br>-<strong>Rhinoplasty</strong>: </p><ul><li>Artificial materials include:<ul><li>synthetic substances</li><li>silicone</li><li>Gore-Tex (polytetrafluoroethylene)</li><li>Medpor (polyethylene implants).</li></ul></li></ul></li><li><p><strong>Artificial skin (wound healing dressing)</strong></p><ul><li>Trends in Biotechnology, 2012, 30, 581-584.</li><li>Video: <a href="https://youtu.be/f1sT2hbD6bGw?si=Bz_VZJPNLrhCkDk">https://youtu.be/f1sT2hbD6bGw?si=Bz_VZJPNLrhCkDk</a></li><li>Lando: <a href="http://www.landobio.com/product/index_1.html">http://www.landobio.com/product/index_1.html</a> (兰度人工皮肤 Innovative Technology of Artificial Dermal Regeneration Matrix Artificial Dermal Regeneration in China)<h3 id="Fourth-Generation"><a href="#Fourth-Generation" class="headerlink" title="Fourth Generation"></a>Fourth Generation</h3></li></ul></li><li><p>Self-healing materials</p><ul><li><a href="https://youtu.be/lVTT5HEPnRb">https://youtu.be/lVTT5HEPnRb</a></li><li><a href="https://youtu.be/-yCZgv_SRA">https://youtu.be/-yCZgv_SRA</a></li></ul></li></ul><ul><li>Shape memory alloy<ul><li><a href="https://youtu.be/vPhB5bSP1NEM">https://youtu.be/vPhB5bSP1NEM</a></li></ul></li></ul><ul><li>4-dimensional material<ul><li><a href="https://youtu.be/GilyGH1V4kAU">https://youtu.be/GilyGH1V4kAU</a></li></ul></li></ul><ul><li>Assistance of AI<ul><li><a href="https://youtu.be/6hmuZHTM7sZnXvY3ZMPX">https://youtu.be/6hmuZHTM7sZnXvY3ZMPX</a></li></ul></li></ul><ul><li><p>Brain-computer interface implants</p><ul><li><a href="https://youtu.be/10bQEz07rH4kDOVJKA">https://youtu.be/10bQEz07rH4kDOVJKA</a></li><li><a href="https://youtu.be/CVgQ5q2nBIRDkISAN5Fx">https://youtu.be/CVgQ5q2nBIRDkISAN5Fx</a></li><li><a href="https://youtu.be/Eps0CkO7o2t=RBEUUNSmF0Y6T0">https://youtu.be/Eps0CkO7o2t=RBEUUNSmF0Y6T0</a></li><li><a href="https://youtu.be/HrAUbow9-nidstrmT5K">https://youtu.be/HrAUbow9-nidstrmT5K</a> (Synchron)</li><li><a href="https://youtu.be/NJThM7sVsOdY">https://youtu.be/NJThM7sVsOdY</a></li></ul></li><li><p>E-Skin: Wireless Communication and Signal Processing Technologies</p></li><li><p>Materials Mimicking Human Skin</p><ul><li>Skin-attachable Devices</li><li>Prosthesis</li><li>Robotic</li><li>Stretchable Materials</li><li>Stretchable Transistors</li><li>Self-healing Materials</li><li>Electronic Skin (E-skin)</li><li>Tactile, Chemical, and Electrophysiological Sensors</li><li>Advanced Materials, Volume 31, Issue 41, First published: 19 September 2019, DOI: 10.1002/adma.201902649</li></ul></li></ul><h1 id="Major-market-shares"><a href="#Major-market-shares" class="headerlink" title="Major market shares"></a>Major market shares</h1><ul><li><p>Market Size</p><ul><li>CAGR 2024-2029: 7.3%</li><li>Market Size (USD Billion)</li><li>2023: 42.3</li><li>2024: 45.2</li><li>2029: 64.2</li><li>Regions: North America, Europe, Asia-Pacific, Middle East &amp; Africa, Latin America</li></ul></li><li><p>Market Dynamics:</p><ul><li>Drivers and Restraints:<ul><li>Growing use of biomaterials in various therapeutic areas</li><li>Growing use of biomaterials in wound healing and plastic surgery</li><li>Rising funding for implantable devices</li><li>Restraint: Biocompatibility issues</li></ul></li></ul></li></ul><ul><li>Product Footprint Market Ecosystem Analysis:<ul><li>Metallic Biomaterials: Carpenter, DSM, Regenity, BASF</li><li>Ceramic Biomaterials: CoorsTek, CeramTec</li><li>Polymeric Biomaterials: Corbion, Evonik</li><li>Natural Biomaterials: Solvay</li></ul></li></ul><h3 id="Market-Segmentation-by-Type-amp-Geographical-Spread"><a href="#Market-Segmentation-by-Type-amp-Geographical-Spread" class="headerlink" title="Market Segmentation by Type &amp; Geographical Spread :"></a>Market Segmentation by Type &amp; Geographical Spread :</h3><ul><li><p>By Type:</p><ul><li>Metallic Biomaterials:<ul><li>Stainless Steel, Titanium &amp; Titanium Alloys, Cobalt-Chrome Alloys, Gold, Silver, Other Metallic Biomaterials</li></ul></li><li>Polymeric Biomaterials: <ul><li>Polymethylmethacrylate, Polyethylene, Polyester, Polyvinylchloride, Silicone Rubber, Nylon, Polyetheretherketone, Other Polymeric Biomaterials</li></ul></li><li>Ceramic Biomaterials: <ul><li>Zirconia, Calcium Phosphate, Aluminum Oxide, Calcium Sulfate, Carbon, Glass</li></ul></li><li>Natural Biomaterials: <ul><li>Hyaluronic Acid, Collagen, Gelatin, Fibrin, Cellulose, Chitin, Alginates, Silk<br>Other</li></ul></li></ul></li><li><p>By Application:</p><ul><li>Cardiovascular: <ul><li>Catheters, Stents, Implantable Cardiac Defibrillators, Pacemakers, Sensors, Heart Valves, Vascular Grafts, Guidewires, Others</li></ul></li><li>Orthopedic: <ul><li>Joint Replacement (Knee Replacement, Hip Replacement, Shoulder Replacement, Others), Bioresorbable Tissue Fixation (Suture Anchors, Interference Screws, Meniscal Repair Tacks, Meshes), Spine (Spinal Fusion, Minimally Invasive Fusion Surgery, Motion Preservation &amp; Dynamic Stabilization, Pedicle-based Rod Systems, Interspinous Process Spacers, Artificial Discs), Fracture Fixation (Bone Plates, Screws, Pins, Rods, Wires), Orthobiologics (Synthetics Bone Grafts)</li></ul></li><li>Ophthalmology: Contact Lenses, Intraocular Lenses, Functional Replacement of Ocular Tissues, Synthetic Corneas, Others</li><li>Dental: <ul><li>Dental Implants, Dental Bone Grafts &amp; Substitutes, Dental Membranes, Tissue Regeneration Materials<br>-Plastic Surgery: Soft Tissue Fillers, Craniofacial Surgery, Bioengineered Skins, Peripheral Nerve Repair, Acellular Dermal Matrices, Facial Wrinkle Treatment</li></ul></li><li>Wound Healing: <ul><li>Wound Closure Devices (Sutures, Staples), Surgical Hemostats, Internal Tissue Sealants, Adhesion Barriers, Hernia Meshes</li></ul></li><li>Tissue Engineering: <ul><li>Scaffolds for Regenerative Medicine, Nanomaterials for Biosensing, Tailoring of Inorganic Nanoparticles</li></ul></li><li>Neurological/Central Nervous System: <ul><li>Shunting Systems, Cortical Neural Prosthetics, Hydrocephalus Shunts, Neural Stem Cell Encapsulation</li></ul></li><li>Other Applications: <ul><li>Drug Delivery Systems, Gastrointestinal Applications, Urinary Applications, Bariatric Surgery</li></ul></li></ul></li></ul><h1 id="Requirements-of-biomaterials"><a href="#Requirements-of-biomaterials" class="headerlink" title="Requirements of biomaterials"></a>Requirements of biomaterials</h1><h2 id="Requirements-of-Biomaterials"><a href="#Requirements-of-Biomaterials" class="headerlink" title="Requirements of Biomaterials:"></a>Requirements of Biomaterials:</h2><ul><li>Inert or specifically interactive</li><li>Biocompatible</li><li>Mechanically and chemically stable or biodegradable</li><li>Processable (for manufacturability)</li><li>Nonthrombogenic (if blood-contacting)</li><li>Sterilizable</li></ul><h1 id="Major-types-and-their-pros-and-cons"><a href="#Major-types-and-their-pros-and-cons" class="headerlink" title="Major types and their pros and cons"></a>Major types and their pros and cons</h1><h2 id="Types-of-Biomaterials"><a href="#Types-of-Biomaterials" class="headerlink" title="Types of Biomaterials"></a>Types of Biomaterials</h2><ul><li><p>Grouped by physical properties:</p></li><li><p>Ceramics:</p><ul><li>Aluminum oxide, zirconia, calcium phosphates</li></ul></li><li><p>Metals:</p><ul><li>Stainless steel, cobalt alloys, titanium alloys</li></ul></li><li><p>Polymers: synthetic and natural</p><ul><li>Synthetic: Silicones, poly(ethylene), poly(vinyl chloride), polyurethanes, polylactides</li><li>Natural: Collagen, gelatin, elastin, silk, polysaccharides</li></ul></li><li><p>Composites</p><ul><li>Micro/nano-dimensioned biomaterials</li></ul></li></ul><p><h3>Class of Materials Used in the Body</h3></p><table>  <thead>    <tr>      <th>Materials</th>      <th>Advantages</th>      <th>Disadvantages</th>      <th>Examples</th>    </tr>  </thead>  <tbody>    <tr>      <td>Polymers (nylon, silicone rubber, polyester, polytetrafluoroethylene, etc.)</td>      <td>Resilient<br>Easy to fabricate</td>      <td>Not strong<br>Deforms with time<br>May degrade</td>      <td>Sutures, blood vessels<br>Soft tissues, sutures, hip socket, ear, nose</td>    </tr>    <tr>      <td>Metals (Ti and its alloys, Co-Cr alloys, Au, Ag, stainless steels, etc.)</td>      <td>Strong, tough<br>Ductile</td>      <td>Dense<br>Difficult to make</td>      <td>Joint replacements, dental<br>Root implants, pacer and suture wires, bone plates and screws</td>    </tr>    <tr>      <td>Ceramics (alumina zirconia, calcium phosphate including hydroxyapatite, carbon)</td>      <td>Very biocompatible</td>      <td>Brittle<br>Not resilient<br>Weak in tension</td>      <td>Dental and orthopedic implants</td>    </tr>    <tr>      <td>Composites (carbon-carbon, wire- or fiber-reinforced bone cement)</td>      <td>Strong<br>Tailor-made</td>      <td>Difficult to make</td>      <td>Bone cement<br>Dental resin</td>    </tr>  </tbody></table><h1 id="Forces-in-biomaterials"><a href="#Forces-in-biomaterials" class="headerlink" title="Forces in biomaterials"></a>Forces in biomaterials</h1><h2 id="Biomaterials-are-materials"><a href="#Biomaterials-are-materials" class="headerlink" title="Biomaterials are materials."></a>Biomaterials are materials.</h2><div class="note info flat"><p>The key to understanding matter is to understand attractive and interactive forces between atoms.</p></div><p>Buddy D. Ratner<br>Bioengineering and Chemical Engineering, University of Washington, Seattle, USA</p><p><h3>Forces that Hold Atoms Together</h3></p><table>  <thead>    <tr>      <th>Interatomic Force</th>      <th>Relative Strength</th>      <th>Example</th>    </tr>  </thead>  <tbody>    <tr>      <td>Van der Waals interactions</td>      <td>Weak</td>      <td>Polyethylene forces that hold the chains together to make a solid</td>    </tr>    <tr>      <td>Ionic</td>      <td>Very strong</td>      <td>NaCl</td>    </tr>    <tr>      <td>Hydrogen Bonding</td>      <td>Medium</td>      <td>Water ice that holds the chains together</td>    </tr>    <tr>      <td>Metallic</td>      <td>Medium-strong</td>      <td>Gold metal with a high-melting point</td>    </tr>    <tr>      <td>Covalent</td>      <td>Strong</td>      <td>The carbon-carbon bond<br>Cross-links in a polyacryl hydrogel</td>    </tr>  </tbody></table><h2 id="Van-der-Waals-or-dispersion-forces"><a href="#Van-der-Waals-or-dispersion-forces" class="headerlink" title="Van der Waals or dispersion forces"></a>Van der Waals or dispersion forces</h2><ul><li>By Consider the electron clouds (charge density in space) of two atoms or molecules, both without permanent dipole moments.</li><li>Electron clouds are contributory in molecular form. </li><li>Can shift to one side of the atom/molecule, therefore, at any moment the atoms or molecules can create a <strong>fluctuating instantaneous dipole</strong>.</li><li>The <strong>fluctuating instantaneous dipole</strong> in one molecule typically induces such an “instantaneous dipole” in the next molecule.<ul><li>They dictate the properties of many materials (for example, some polymers such as polyethylene which has no obvious dipole).</li><li>They explain why the lipids in cell membranes assemble into the bilayer structure. A typical van der Waals interactive force (for example, CH4 … CH4) is about 9 kJ/mol.</li></ul></li></ul><h2 id="Ionic-forces-and-Hydrogen-bond"><a href="#Ionic-forces-and-Hydrogen-bond" class="headerlink" title="Ionic forces and Hydrogen bond"></a>Ionic forces and Hydrogen bond</h2><ul><li>Ionic force: <ul><li>The + and - charges are arrayed to achieve the closest interaction of opposite charges, and the furthest separation of similar charges. </li><li>Typical ionic bond strength: (for example, NaCl) are about 770 kJ/mol.</li></ul></li><li>Hydrogen bond:<ul><li>Typical hydrogen bond strengths (for example, O-H … H) are about 20 kJ/mol.</li></ul></li></ul><h2 id="Metallic-and-covalent-bonds"><a href="#Metallic-and-covalent-bonds" class="headerlink" title="Metallic and covalent bonds"></a>Metallic and covalent bonds</h2><ul><li>Single metallic bond is rarely discussed. The total interactive strength is realized through the multiplicity of the plus-minus interactions, at 25°C, aluminum will have a heat of sublimation of 325 kJ/mol, while titanium will be about 475 kJ/mol.</li><li>Covalent bonds are relatively strong bonds associated with sharing of pairs of electrons between atoms. Typical covalent bond strengths (for example, C-C) are about 350 kJ/mol.</li></ul><h2 id="Ionically-bonded-Hydrogels-Natural-Polymer"><a href="#Ionically-bonded-Hydrogels-Natural-Polymer" class="headerlink" title="Ionically-bonded Hydrogels/ Natural Polymer"></a>Ionically-bonded Hydrogels/ Natural Polymer</h2><p>For example: </p><ul><li>Base acid: guluronic acid, mannuroic acid, Alginate(polysaccharide)<br>By adding:<ul><li>Cationic polymer (e.g. chitosan fraction, polylysine)</li><li>Divalent cations: (Creating salt bridge e.g. Ca2+)<br>Form GELS using Ions or Polymers</li></ul></li></ul><h2 id="Collagen-the-most-abundant-protein-in-mammals"><a href="#Collagen-the-most-abundant-protein-in-mammals" class="headerlink" title="Collagen, the most abundant protein in mammals"></a>Collagen, the most abundant protein in mammals</h2><ul><li>~30% of total protein mass</li><li>Deposited in the extracellular matrix</li><li>Since the discovery of collagen II by Miller and Matukas (1969), 26 new collagen types have been found</li><li>The common structural feature of collagens is the presence of a triple helix that can range from most of their structure (96% for collagen I) to less than 10% (collagen XII)</li><li>Collagen α chains vary in size from 662 up to 3152 amino acids</li><li>The three α chains can be either identical to form homotrimers (e.g., collagen II) or different to form heterotrimers (e.g., collagen IX)</li></ul><p>By Cold Spring Harb Perspect Biol. 2011 Jan; 3(1): a004978</p><h2 id="MOLECULAR-ASSEMBLIES-Collagen-hierarchical-structures"><a href="#MOLECULAR-ASSEMBLIES-Collagen-hierarchical-structures" class="headerlink" title="MOLECULAR ASSEMBLIES: Collagen hierarchical structures"></a>MOLECULAR ASSEMBLIES: Collagen hierarchical structures</h2><ul><li>MOLECULAR ASSEMBLIES:<ul><li>α-chains -&gt; collagen molecules (triple helices) -&gt; collagen fibrils -&gt; collagen fibers </li></ul></li><li><p>Collagen fibers scale:</p><ul><li>Up to 10s of microns, 10-500 nm</li></ul></li><li><p>Amino acids in the alpha chain are <strong>proline (PRO), glycine (GLY) and hydroxyproline (HYP)</strong>.</p></li></ul><h2 id="TYPES-OF-COLLAGEN"><a href="#TYPES-OF-COLLAGEN" class="headerlink" title="TYPES OF COLLAGEN"></a>TYPES OF COLLAGEN</h2><ul><li>TYPE 1: <strong>skin, nails and hair</strong><ul><li>Found in ~90% of the collagen in the body. Forms 80% of dermis of skin and is the most beneficial for skin, nails and hair.</li></ul></li><li>TYPE 2: <strong>elastic cartilage, e.g. ear</strong><ul><li>Found in elastic cartilage like the ear. This type is linked to anti-ageing properties.</li></ul></li><li>TYPE 3: <strong>intestines, blood vessels, muscles</strong><ul><li>Occurs in the intestines and has been linked to blood vessels and muscles.</li></ul></li><li>TYPE 4: <strong>base membranes for organs</strong><ul><li>Found in egg whites, this collagen forms the base also forms the base membranes for organs, including the kidney.</li></ul></li><li>TYPE 5: <strong>cornea &amp; embryonic development</strong><ul><li>Found in the cornea. Type 5 also helps with embryonic development.</li></ul></li></ul><p>By <a href="https://absolute-collagen.com/blogs/features-testimonials/different-types-of-collagen-which-is-best">https://absolute-collagen.com/blogs/features-testimonials/different-types-of-collagen-which-is-best</a></p><h1 id="Three-aspects-in-biomaterials"><a href="#Three-aspects-in-biomaterials" class="headerlink" title="Three aspects in biomaterials"></a>Three aspects in biomaterials</h1><ul><li>Biological materials or body,</li><li>Implant materials,</li><li>Interaction between the two in the body</li></ul><h1 id="In-stent-restenosis"><a href="#In-stent-restenosis" class="headerlink" title="In-stent restenosis"></a>In-stent restenosis</h1><h2 id="Most-successful-invention"><a href="#Most-successful-invention" class="headerlink" title="Most successful invention"></a>Most successful invention</h2><ul><li>Stent story</li><li>Video: <a href="https://youtu.be/f92O0iT2Odo">https://youtu.be/f92O0iT2Odo</a></li><li>Stent is a metal or plastic tube inserted into the lumen of an anatomic vessel or duct to keep the passageway open, and stenting is the placement of a stent.</li><li>The first use of a coronary stent is typically attributed to Jacques Puel and Ulrich Sigwart when they implanted a stent into a patient in Toulouse, France, in 1986.</li></ul><h2 id="Pathophysiology-of-Restenosis"><a href="#Pathophysiology-of-Restenosis" class="headerlink" title="Pathophysiology of Restenosis"></a>Pathophysiology of Restenosis</h2><ul><li>The initial consequences immediately after stent placement are de-endothelialization, crush of the plaque, and stretch of the entire artery.</li><li>A layer of platelets and fibrin is then deposited at the injured site. Activated platelets on the surface expressing adhesion molecules such as P-selectin attach circulating leukocytes via platelet receptors such as P-selectin glycoprotein (GP) ligand. The leukocytes begin a process of rolling along the injured surface and migrate across the platelet-fibrin layer and into the tissue driven by chemical gradients of chemokines released from SMCs and resident macrophages.</li><li>Next is a granulation or cellular proliferation phase. Growth factors are subsequently released from platelets and leukocytes, which stimulate migration of smooth muscle cells (SMCs) from the media into the neointima. The resultant neointima consists of SMCs, extracellular matrix, and macrophages recruited over several weeks.</li><li>Over longer time periods, the artery enters a phase of remodeling involving extracellular matrix (ECM) protein degradation and resynthesis. Accompanying this phase is a shift to fewer cellular elements and greater production of ECM.</li></ul><p>By Circulation. 2005; 111:237-273</p><h2 id="Additional-info"><a href="#Additional-info" class="headerlink" title="Additional info"></a>Additional info</h2><h3 id="History-of-Coronary-Stents"><a href="#History-of-Coronary-Stents" class="headerlink" title="History of Coronary Stents"></a>History of Coronary Stents</h3><ul><li><strong>First Use</strong>: The first coronary stent was implanted in a patient in Toulouse, France, in 1986.</li><li><strong>Initial Consequences</strong>: Post-stent placement effects include:<ul><li>De-endothelialization</li><li>Crushing of the plaque</li><li>Stretching of the entire artery</li></ul></li></ul><h3 id="Stent-Surgery-Procedure"><a href="#Stent-Surgery-Procedure" class="headerlink" title="Stent Surgery Procedure"></a>Stent Surgery Procedure</h3><ul><li><strong>Procedure</strong>: Involves inserting a catheter into the body, avoiding open-chest surgery.</li><li><strong>Patient Preference</strong>: Many patients prefer stenting due to its minimally invasive nature. No patients were excluded from stenting due to angiographic reasons or comorbidities, unlike traditional surgery.</li></ul><h3 id="Minimally-Invasive-Surgery"><a href="#Minimally-Invasive-Surgery" class="headerlink" title="Minimally Invasive Surgery"></a>Minimally Invasive Surgery</h3><ul><li><strong>Definition</strong>: Uses small incisions instead of large ones, enabling complex procedures with:<ul><li>Less trauma to the body</li><li>Reduced pain and scarring</li><li>Quicker recovery times compared to traditional surgery</li></ul></li></ul><h1 id="Need-of-selection-and-processing-of-biomaterials"><a href="#Need-of-selection-and-processing-of-biomaterials" class="headerlink" title="Need of selection and processing of biomaterials"></a>Need of selection and processing of biomaterials</h1><h2 id="Choice-of-material-of-bone-regeneration"><a href="#Choice-of-material-of-bone-regeneration" class="headerlink" title="Choice of material of bone regeneration"></a>Choice of material of bone regeneration</h2><ul><li>Interaction between biomaterials and biology<ul><li>From Stent: <ul><li>Restore the blood flow through de-endothelialization, crush of the plaque, and stretch of the entire artery</li></ul></li><li>From body: <ul><li>Platelet aggregation, inflammatory cell infiltration, release of growth factors, smooth muscle cell modulation and proliferation, ECM deposition and remodeling</li></ul></li></ul></li></ul><h2 id="Selection-and-processing"><a href="#Selection-and-processing" class="headerlink" title="Selection, and processing"></a>Selection, and processing</h2><ul><li>Types of Biomaterials (mechanical properties, biocompatibility, degradation, non-thrombogenic, etc);</li><li><p>Processing involves a complex series of chemical, thermal, and physical processes that prepare a starting material, create a shape, retain that shape, refine the structure and shape.</p></li><li><p><strong>Questions</strong>:<br>For Hip Replacement vs Skull Replacement:</p><ol><li>Titanium vs. Polycaprolactone?</li><li>Porous surface or smooth surface?</li><li>Cell attractive or cell repellent?</li></ol></li></ul><p><h3>Table: Hip Replacement vs Skull Replacement</h3></p><table>  <thead>    <tr>      <th>Aspect</th>      <th>Hip Replacement</th>      <th>Skull Replacement</th>    </tr>  </thead>  <tbody>    <tr>      <td>Typical Patient</td>      <td>Aging population</td>      <td>Injury, surgery, tissue defect (broad age range)</td>    </tr>    <tr>      <td>Primary Need</td>      <td>Mobility</td>      <td>Structural restoration and integration</td>    </tr>    <tr>      <td>Material Used</td>      <td>Titanium</td>      <td>Polycaprolactone / Titanium</td>    </tr>    <tr>      <td>Surface Type</td>      <td>Smooth surface</td>      <td>Porous surface</td>    </tr>    <tr>      <td>Fixation Strategy</td>      <td>Requires robust fixation</td>      <td>Encourages bone tissue integration</td>    </tr>    <tr>      <td>Cell Interaction</td>      <td>Cell repellent</td>      <td>Cell attractive</td>    </tr>  </tbody></table><h1 id="Answering-skill"><a href="#Answering-skill" class="headerlink" title="Answering skill"></a>Answering skill</h1><ul><li>Characterization of biomaterials:<ul><li>Polymers and hydrogel</li><li>Metals and inorganics</li><li>Micro/nano-biomaterials</li></ul></li><li>What does the body do to the biomaterials:<ul><li>Host reaction to biomaterials and their evaluation</li><li>Biological testing of biomaterials</li><li>Degradation in biological environment</li></ul></li><li>What does the biomaterials do to the body:<ul><li>Biomaterials in drug delivery and imaging</li><li>Biomaterials in implants</li><li>Biomaterials in tissue engineering</li><li>Practical aspects of materials in biomedical engineering</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Lecture-1-History-Definition-and-Outline&quot;&gt;&lt;a href=&quot;#Lecture-1-History-Definition-and-Outline&quot; class=&quot;headerlink&quot; title=&quot;Lecture 1: H</summary>
      
    
    
    
    <category term="Education" scheme="https://victor999p.github.io/categories/Education/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/"/>
    
    <category term="Biomaterials(BME3123)" scheme="https://victor999p.github.io/categories/Education/Biomedical-Engineering/Biomaterials-BME3123/"/>
    
    
    <category term="Biomaterials" scheme="https://victor999p.github.io/tags/Biomaterials/"/>
    
    <category term="Biomedical Engineering" scheme="https://victor999p.github.io/tags/Biomedical-Engineering/"/>
    
    <category term="Lecture notes" scheme="https://victor999p.github.io/tags/Lecture-notes/"/>
    
  </entry>
  
  <entry>
    <title>Test 02</title>
    <link href="https://victor999p.github.io/posts/fe3551ce.html"/>
    <id>https://victor999p.github.io/posts/fe3551ce.html</id>
    <published>2025-09-02T17:32:00.000Z</published>
    <updated>2025-10-01T09:54:21.638Z</updated>
    
    <content type="html"><![CDATA[<p>change?</p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><h2 id="带有对齐格式的表格"><a href="#带有对齐格式的表格" class="headerlink" title="带有对齐格式的表格"></a>带有对齐格式的表格</h2><div class="table-container"><table><thead><tr><th style="text-align:left">标题1</th><th style="text-align:center">标题2</th><th style="text-align:right">标题2</th></tr></thead><tbody><tr><td style="text-align:left">文本好短</td><td style="text-align:center">文本不短也不长</td><td style="text-align:right">文本好长文本好长文本好长</td></tr><tr><td style="text-align:left">文本好长文本好长文本好长</td><td style="text-align:center">文本好短</td><td style="text-align:right">文本不短也不长</td></tr></tbody></table></div><p>居左对齐，居中对齐，居右对齐，Markdown 代码:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 标题1 | 标题2 | 标题2 |</span><br><span class="line">| :------ | :------: | ------: |</span><br><span class="line">| 文本好短 | 文本不短也不长 | 文本好长文本好长文本好长 |</span><br><span class="line">| 文本好长文本好长文本好长 | 文本好短 | 文本不短也不长 |</span><br></pre></td></tr></table></figure></p><h2 id="html写法"><a href="#html写法" class="headerlink" title="html写法"></a>html写法</h2><p><table>  <tr>    <th>标题1</th>    <th>标题2</th>    <th>标题3</th>  </tr>  <tr>    <td>文本好短</td>    <td>文本不短也不长</td>    <td>文本好长文本好长文本好长</td>  </tr>  <tr>    <td>文本好长文本好长文本好长</td>    <td>文本好短</td>    <td>文本不短也不长</td>  </tr></table><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;th&gt;标题1&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;标题2&lt;/th&gt;</span><br><span class="line">    &lt;th&gt;标题3&lt;/th&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;文本好短&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;文本不短也不长&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;文本好短&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;文本不短也不长&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><p>这种方式，表格上方会留出大量空白</p><h2 id="解决表格上方留出空白的办法"><a href="#解决表格上方留出空白的办法" class="headerlink" title="解决表格上方留出空白的办法"></a>解决表格上方留出空白的办法</h2><p>1.压缩表格<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table&gt;&lt;tr&gt;&lt;th&gt;标题1&lt;/th&gt;&lt;th&gt;标题2&lt;/th&gt;&lt;th&gt;标题3&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;文本好长文本好长文本好长&lt;/td&gt;&lt;td&gt;文本好短&lt;/td&gt;&lt;td&gt;文本不短也不长&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-表格首部和尾部用如下字符串包裹"><a href="#2-表格首部和尾部用如下字符串包裹" class="headerlink" title="2.表格首部和尾部用如下字符串包裹"></a>2.表格首部和尾部用如下字符串包裹</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125; table &#123;% endraw %&#125;</span><br></pre></td></tr></table></figure><h1 id="mermaid-文檔"><a href="#mermaid-文檔" class="headerlink" title="mermaid 文檔"></a>mermaid 文檔</h1><p><a href="https://mermaid.nodejs.cn/syntax/flowchart.html">https://mermaid.nodejs.cn/syntax/flowchart.html</a></p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    flowchart LR    c1--&gt;a2    subgraph one    a1--&gt;a2    end    subgraph two    b1--&gt;b2    end    subgraph three    c1--&gt;c2    end    one --&gt; two    three --&gt; two    two --&gt; c2  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>    pietitle Key elements in Product X&quot;Calcium&quot; : 42.96&quot;Potassium&quot; : 50.05&quot;Magnesium&quot; : 10.01&quot;Iron&quot; : 5  </pre></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line">title Key elements in Product X</span><br><span class="line">&quot;Calcium&quot; : 42.96</span><br><span class="line">&quot;Potassium&quot; : 50.05</span><br><span class="line">&quot;Magnesium&quot; : 10.01</span><br><span class="line">&quot;Iron&quot; : 5</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;change?&lt;/p&gt;
&lt;h1 id=&quot;表格&quot;&gt;&lt;a href=&quot;#表格&quot; class=&quot;headerlink&quot; title=&quot;表格&quot;&gt;&lt;/a&gt;表格&lt;/h1&gt;&lt;h2 id=&quot;带有对齐格式的表格&quot;&gt;&lt;a href=&quot;#带有对齐格式的表格&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Test" scheme="https://victor999p.github.io/categories/Test/"/>
    
    
    <category term="introduction" scheme="https://victor999p.github.io/tags/introduction/"/>
    
    <category term="first" scheme="https://victor999p.github.io/tags/first/"/>
    
  </entry>
  
  <entry>
    <title>常用Python程式碼片段集合</title>
    <link href="https://victor999p.github.io/posts/a4367020.html"/>
    <id>https://victor999p.github.io/posts/a4367020.html</id>
    <published>2025-08-30T09:31:05.000Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/posts/98acdb98.html" class="lang-switch">Switch to English Version 🇬🇧</a></p><h1 id="常用Python程式碼片段集合"><a href="#常用Python程式碼片段集合" class="headerlink" title="常用Python程式碼片段集合"></a>常用Python程式碼片段集合</h1><p>本文提供了一份精心挑選的常用Python程式碼片段列表，涵蓋基本操作、資料結構、檔案處理等內容。每個片段都附有簡要說明及執行結果，可直接使用或根據您的專案需求進行調整。無論您是初學者還是經驗豐富的開發者，這些範例都將是一個方便的參考。</p><h2 id="1-你好，世界！"><a href="#1-你好，世界！" class="headerlink" title="1. 你好，世界！"></a>1. 你好，世界！</h2><p>經典的“你好，世界！”程式，幫助您開始使用Python。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，世界！&quot;</span>)</span><br></pre></td></tr></table></figure><p>說明：<code>print()</code> 函數將文字輸出到控制台。這通常是測試Python環境設置的第一個程式。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你好，世界！</span><br></pre></td></tr></table></figure></p><h2 id="2-列表操作"><a href="#2-列表操作" class="headerlink" title="2. 列表操作"></a>2. 列表操作</h2><p>列表是Python中最通用的資料結構之一。以下是如何創建、添加和遍歷列表的範例。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 創建列表</span></span><br><span class="line">fruits = [<span class="string">&quot;蘋果&quot;</span>, <span class="string">&quot;香蕉&quot;</span>, <span class="string">&quot;橙子&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加項</span></span><br><span class="line">fruits.append(<span class="string">&quot;葡萄&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷列表</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;水果：<span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>說明：列表是有序、可變的集合。<code>append()</code> 方法將項添加到列表末尾，<code>for</code> 迴圈用於遍歷每個元素。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">水果：蘋果</span><br><span class="line">水果：香蕉</span><br><span class="line">水果：橙子</span><br><span class="line">水果：葡萄</span><br></pre></td></tr></table></figure></p><hr><h2 id="3-字典操作"><a href="#3-字典操作" class="headerlink" title="3. 字典操作"></a>3. 字典操作</h2><p>字典用於儲存鍵值對。此片段展示如何創建、訪問和更新字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 創建字典</span></span><br><span class="line">person = &#123;<span class="string">&quot;姓名&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;年齡&quot;</span>: <span class="number">25</span>, <span class="string">&quot;城市&quot;</span>: <span class="string">&quot;紐約&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 訪問值</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;姓名&quot;</span>])  <span class="comment">#輸出：Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新值</span></span><br><span class="line">person[<span class="string">&quot;年齡&quot;</span>] = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新的鍵值對</span></span><br><span class="line">person[<span class="string">&quot;職業&quot;</span>] = <span class="string">&quot;工程師&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍歷鍵和值</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：字典是可變的，支持基於鍵的快速訪問。使用 <code>items()</code> 方法遍歷鍵值對。</p><hr><h2 id="4-檔案讀寫"><a href="#4-檔案讀寫" class="headerlink" title="4. 檔案讀寫"></a>4. 檔案讀寫</h2><p>在Python中，讀寫檔案是常見任務。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寫入檔案</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;你好，這是一個測試檔案！\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;第二行。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>with</code> 語句確保檔案使用後正確關閉。<code>&quot;w&quot;</code> 模式用於寫入，<code>&quot;r&quot;</code> 模式用於讀取。</p><p>執行結果：```text<br>你好，這是一個測試檔案！<br>第二行。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">## 5. 列表推導式</span><br><span class="line">列表推導式提供了一種簡潔的方式，基於現有可迭代物件創建列表。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 創建1到5的平方列表</span><br><span class="line">squares = [x**2 for x in range(1, 6)]</span><br><span class="line">print(squares)  # 輸出：[1, 4, 9, 16, 25]</span><br><span class="line"></span><br><span class="line"># 篩選偶數</span><br><span class="line">evens = [x for x in range(10) if x % 2 == 0]</span><br><span class="line">print(evens)  # 輸出：[0, 2, 4, 6, 8]</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：列表推導式將迴圈和條件語句合併成一行，提高可讀性和效率。</p><p>執行結果：```text<br>[1, 4, 9, 16, 25]<br>[0, 2, 4, 6, 8]<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 6. 函數定義</span><br><span class="line">函數幫助將程式碼組織成可重用的塊。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def calculate_area(length, width):</span><br><span class="line">    &quot;&quot;&quot;計算矩形面積。&quot;&quot;&quot;</span><br><span class="line">    return length * width</span><br><span class="line"></span><br><span class="line"># 調用函數</span><br><span class="line">area = calculate_area(5, 3)</span><br><span class="line">print(f&quot;面積&#123;area&#125;&quot;)  # 輸出：面積：15</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：<code>def</code> 關鍵字定義函數。文件字串（<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>）描述函數用途，<code>return</code> 輸出結果。</p><p>執行結果：```text</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">面積：15</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 7. 異常處理</span><br><span class="line">使用 try-except 塊優雅地處理錯誤。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">try:</span><br><span class="line">    num = int(input(&quot;請輸入一個數字：&quot;))</span><br><span class="line">    result = 10 / num</span><br><span class="line">    print(f&quot;結果：&#123;result&#125;&quot;)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;錯誤：不能除以零！&quot;)</span><br><span class="line">except ValueError:</span><br><span class="line">    print(&quot;錯誤：請輸入有效數字！&quot;)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>try</code> 塊運行可能引發錯誤的程式碼。<code>except</code> 塊處理特定異常，防止程式崩潰。</p><p>執行結果（假設輸入為 2）：<br>執行結果：```text<br>請輸入一個數字：2<br>結果：5.0<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 8. 集合操作</span><br><span class="line">集合用於儲存唯一項並執行集合操作。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 創建集合</span><br><span class="line">numbers = &#123;1, 2, 2, 3, 4&#125;  # 自動移除重複項</span><br><span class="line">print(numbers)  #輸出：&#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line"># 集合操作</span><br><span class="line">other_numbers = &#123;3, 4, 5, 6&#125;</span><br><span class="line">union = numbers | other_numbers</span><br><span class="line">intersection = numbers &amp; other_numbers</span><br><span class="line">print(f&quot;並集：&#123;union&#125;&quot;)  #輸出：並集：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">print(f&quot;交集：&#123;intersection&#125;&quot;)  #輸出：交集：&#123;3, 4&#125;</span><br></pre></td></tr></table></figure></p><p><strong>說明</strong>：集合自動移除重複項。運算符如 <code>|</code>（並集）和 <code>&amp;</code>（交集）執行集合操作。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;1, 2, 3, 4&#125;</span><br><span class="line">並集：&#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">交集：&#123;3, 4&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="9-字串操作"><a href="#9-字串操作" class="headerlink" title="9. 字串操作"></a>9. 字串操作</h2><p>Python 提供強大的字串處理工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;  你好，Python！  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除空格</span></span><br><span class="line">cleaned = text.strip()</span><br><span class="line"><span class="built_in">print</span>(cleaned)  <span class="comment">#輸出：你好，Python！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割成單詞</span></span><br><span class="line">words = cleaned.split()</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment">#輸出：[&#x27;你好，&#x27;, &#x27;Python！&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 連接單詞</span></span><br><span class="line">joined = <span class="string">&quot;-&quot;</span>.join(words)</span><br><span class="line"><span class="built_in">print</span>(joined)  <span class="comment">#輸出：你好，-Python！</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>strip()</code>、<code>split()</code> 和 <code>join()</code> 方法使字串處理變得簡單。</p><hr><h2 id="10-Lambda-函數"><a href="#10-Lambda-函數" class="headerlink" title="10. Lambda 函數"></a>10. Lambda 函數</h2><p>Lambda 函數是匿名的單表達式函數，適合快速操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定義 lambda 函數</span></span><br><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">5</span>))  <span class="comment">#輸出：25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合 sorted() 使用</span></span><br><span class="line">points = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line">sorted_points = <span class="built_in">sorted</span>(points, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_points)  <span class="comment">#輸出：[(3, 1), (1, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：Lambda 函數是常規函數的簡潔替代，常用于 <code>sorted()</code> 或 <code>map()</code> 等函數。</p><hr><h2 id="11-日期處理"><a href="#11-日期處理" class="headerlink" title="11. 日期處理"></a>11. 日期處理</h2><p><code>datetime</code> 模組幫助處理日期和時間。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 當前日期和時間</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;當前時間：<span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加3天</span></span><br><span class="line">future = now + timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;三天後：<span class="subst">&#123;future&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>datetime</code> 模組提供日期和時間操作的類。<code>timedelta</code> 用於日期算術運算。</p><p>執行結果（假設當前時間為 2025-08-30 17:31:05）：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">當前時間：2025-08-30 17:31:05.123456</span><br><span class="line">三天後：2025-09-02 17:31:05.123456</span><br></pre></td></tr></table></figure></p><hr><h2 id="12-列表切片"><a href="#12-列表切片" class="headerlink" title="12. 列表切片"></a>12. 列表切片</h2><p>切片允許您提取列表（或其他序列）的部分內容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取前三個元素</span></span><br><span class="line">first_three = numbers[:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(first_three)  <span class="comment">#輸出：[0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 獲取每隔一個元素</span></span><br><span class="line">every_second = numbers[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(every_second)  <span class="comment">#輸出：[0, 2, 4]</span></span><br></pre></td></tr></table></figure><p><strong>說明</strong>：<code>[start:end:step]</code> 語法提取列表的一部分。省略 <code>start</code> 或 <code>end</code> 使用列表的邊界。</p><p>執行結果：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[0, 1, 2]</span><br><span class="line">[0, 2, 4]</span><br></pre></td></tr></table></figure></p><hr><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>這些Python程式碼片段涵蓋了常見任務，展示了Python的簡單性和強大功能。它們可以作為您專案的起點或編碼時的快速參考。Python的可讀性和靈活性使其成為初學者和高級開發者的理想選擇。快樂編碼！</p><hr><p>發布於 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/posts/98acdb98.html&quot; class=&quot;lang-switch&quot;&gt;Switch to English Version 🇬🇧&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;常用Python程式碼片段集合&quot;&gt;&lt;a href=&quot;#常用Python程式碼片</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
    <category term="AI generate" scheme="https://victor999p.github.io/tags/AI-generate/"/>
    
  </entry>
  
  <entry>
    <title>Python Basic</title>
    <link href="https://victor999p.github.io/posts/98acdb98.html"/>
    <id>https://victor999p.github.io/posts/98acdb98.html</id>
    <published>2025-08-30T09:18:00.000Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<div class="lang-switch">  <a href="/posts/a4367020.html" class="btn btn--primary">切换到中文版本 🇨🇳</a></div><h1 id="A-Collection-of-Common-Python-Code-Snippets"><a href="#A-Collection-of-Common-Python-Code-Snippets" class="headerlink" title="A Collection of Common Python Code Snippets"></a>A Collection of Common Python Code Snippets</h1><p>This blog post provides a curated list of commonly used Python code snippets, covering basic operations, data structures, file handling, and more. Each snippet includes a brief explanation and is ready to use or adapt for your projects. Whether you’re a beginner or an experienced developer, these examples will serve as a handy reference.</p><h2 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1. Hello World"></a>1. Hello World</h2><p>The classic “Hello, World!” program to get started with Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>print()</code> function outputs text to the console. This is often the first program written to test Python’s setup.</p><hr><h2 id="2-Working-with-Lists"><a href="#2-Working-with-Lists" class="headerlink" title="2. Working with Lists"></a>2. Working with Lists</h2><p>Lists are one of Python’s most versatile data structures. Here’s how to create, append, and iterate over a list.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a list</span></span><br><span class="line">fruits = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Append an item</span></span><br><span class="line">fruits.append(<span class="string">&quot;grape&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterate over the list</span></span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Fruit: <span class="subst">&#123;fruit&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Lists are ordered, mutable collections. The <code>append()</code> method adds an item to the end, and a <code>for</code> loop iterates over each element.</p><hr><h2 id="3-Dictionary-Operations"><a href="#3-Dictionary-Operations" class="headerlink" title="3. Dictionary Operations"></a>3. Dictionary Operations</h2><p>Dictionaries store key-value pairs. This snippet shows how to create, access, and update a dictionary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a dictionary</span></span><br><span class="line">person = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>, <span class="string">&quot;city&quot;</span>: <span class="string">&quot;New York&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Access a value</span></span><br><span class="line"><span class="built_in">print</span>(person[<span class="string">&quot;name&quot;</span>])  <span class="comment"># Output: Alice</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Update a value</span></span><br><span class="line">person[<span class="string">&quot;age&quot;</span>] = <span class="number">26</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add a new key-value pair</span></span><br><span class="line">person[<span class="string">&quot;job&quot;</span>] = <span class="string">&quot;Engineer&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Iterate over keys and values</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> person.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;key&#125;</span>: <span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Dictionaries are mutable and allow fast key-based access. Use <code>items()</code> to iterate over key-value pairs.</p><hr><h2 id="4-File-Reading-and-Writing"><a href="#4-File-Reading-and-Writing" class="headerlink" title="4. File Reading and Writing"></a>4. File Reading and Writing</h2><p>Reading from and writing to files is a common task in Python.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write to a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="string">&quot;Hello, this is a test file!\n&quot;</span>)</span><br><span class="line">    file.write(<span class="string">&quot;Second line.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Read from a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    content = file.read()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>with</code> statement ensures the file is properly closed after use. Mode <code>&quot;w&quot;</code> is for writing, and <code>&quot;r&quot;</code> is for reading.</p><hr><h2 id="5-List-Comprehension"><a href="#5-List-Comprehension" class="headerlink" title="5. List Comprehension"></a>5. List Comprehension</h2><p>List comprehensions provide a concise way to create lists based on existing iterables.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a list of squares for numbers 1 to 5</span></span><br><span class="line">squares = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)  <span class="comment"># Output: [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter even numbers</span></span><br><span class="line">evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(evens)  <span class="comment"># Output: [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: List comprehensions combine loops and conditionals into a single line, improving readability and efficiency.</p><hr><h2 id="6-Function-Definition"><a href="#6-Function-Definition" class="headerlink" title="6. Function Definition"></a>6. Function Definition</h2><p>Functions help organize code into reusable blocks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_area</span>(<span class="params">length, width</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Calculate the area of a rectangle.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> length * width</span><br><span class="line"></span><br><span class="line"><span class="comment"># Call the function</span></span><br><span class="line">area = calculate_area(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Area: <span class="subst">&#123;area&#125;</span>&quot;</span>)  <span class="comment"># Output: Area: 15</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>def</code> keyword defines a function. The docstring (<code>&quot;&quot;&quot;...&quot;&quot;&quot;</code>) describes its purpose, and <code>return</code> outputs the result.</p><hr><h2 id="7-Exception-Handling"><a href="#7-Exception-Handling" class="headerlink" title="7. Exception Handling"></a>7. Exception Handling</h2><p>Handle errors gracefully with try-except blocks.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;Enter a number: &quot;</span>))</span><br><span class="line">    result = <span class="number">10</span> / num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Result: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: Cannot divide by zero!&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Error: Please enter a valid number!&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>try</code> block runs code that might raise an error. <code>except</code> blocks handle specific exceptions, preventing the program from crashing.</p><hr><h2 id="8-Working-with-Sets"><a href="#8-Working-with-Sets" class="headerlink" title="8. Working with Sets"></a>8. Working with Sets</h2><p>Sets are useful for storing unique items and performing set operations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a set</span></span><br><span class="line">numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment"># Duplicates are removed</span></span><br><span class="line"><span class="built_in">print</span>(numbers)  <span class="comment"># Output: &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set operations</span></span><br><span class="line">other_numbers = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">union = numbers | other_numbers</span><br><span class="line">intersection = numbers &amp; other_numbers</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Union: <span class="subst">&#123;union&#125;</span>&quot;</span>)  <span class="comment"># Output: Union: &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Intersection: <span class="subst">&#123;intersection&#125;</span>&quot;</span>)  <span class="comment"># Output: Intersection: &#123;3, 4&#125;</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Sets automatically remove duplicates. Operators like <code>|</code> (union) and <code>&amp;</code> (intersection) perform set operations.</p><hr><h2 id="9-String-Manipulation"><a href="#9-String-Manipulation" class="headerlink" title="9. String Manipulation"></a>9. String Manipulation</h2><p>Python offers powerful string manipulation tools.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;  Hello, Python!  &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Strip whitespace</span></span><br><span class="line">cleaned = text.strip()</span><br><span class="line"><span class="built_in">print</span>(cleaned)  <span class="comment"># Output: Hello, Python!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Split into words</span></span><br><span class="line">words = cleaned.split()</span><br><span class="line"><span class="built_in">print</span>(words)  <span class="comment"># Output: [&#x27;Hello,&#x27;, &#x27;Python!&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Join words</span></span><br><span class="line">joined = <span class="string">&quot;-&quot;</span>.join(words)</span><br><span class="line"><span class="built_in">print</span>(joined)  <span class="comment"># Output: Hello,-Python!</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Methods like <code>strip()</code>, <code>split()</code>, and <code>join()</code> make string processing straightforward.</p><hr><h2 id="10-Lambda-Functions"><a href="#10-Lambda-Functions" class="headerlink" title="10. Lambda Functions"></a>10. Lambda Functions</h2><p>Lambda functions are anonymous, single-expression functions for quick operations.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define a lambda function</span></span><br><span class="line">square = <span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(square(<span class="number">5</span>))  <span class="comment"># Output: 25</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use with sorted()</span></span><br><span class="line">points = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">3</span>)]</span><br><span class="line">sorted_points = <span class="built_in">sorted</span>(points, key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(sorted_points)  <span class="comment"># Output: [(3, 1), (1, 2), (2, 3)]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: Lambda functions are concise alternatives to regular functions, often used with functions like <code>sorted()</code> or <code>map()</code>.</p><hr><h2 id="11-Working-with-Dates"><a href="#11-Working-with-Dates" class="headerlink" title="11. Working with Dates"></a>11. Working with Dates</h2><p>The <code>datetime</code> module helps handle dates and times.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># Current date and time</span></span><br><span class="line">now = datetime.now()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Current time: <span class="subst">&#123;now&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add 3 days</span></span><br><span class="line">future = now + timedelta(days=<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Three days later: <span class="subst">&#123;future&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The <code>datetime</code> module provides classes for date and time manipulation. <code>timedelta</code> is used for arithmetic with dates.</p><hr><h2 id="12-List-Slicing"><a href="#12-List-Slicing" class="headerlink" title="12. List Slicing"></a>12. List Slicing</h2><p>Slicing allows you to extract parts of a list (or other sequences).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get first three elements</span></span><br><span class="line">first_three = numbers[:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(first_three)  <span class="comment"># Output: [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get every second element</span></span><br><span class="line">every_second = numbers[::<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(every_second)  <span class="comment"># Output: [0, 2, 4]</span></span><br></pre></td></tr></table></figure><p><strong>Explanation</strong>: The syntax <code>[start:end:step]</code> extracts a portion of a list. Omitting <code>start</code> or <code>end</code> uses the list’s boundaries.</p><hr><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>These Python snippets cover common tasks and demonstrate Python’s simplicity and power. Use them as a starting point for your projects or as a quick reference when coding. Python’s readability and flexibility make it ideal for both beginners and advanced developers. Happy coding!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;lang-switch&quot;&gt;
  &lt;a href=&quot;/posts/a4367020.html&quot; class=&quot;btn btn--primary&quot;&gt;切换到中文版本 🇨🇳&lt;/a&gt;
&lt;/div&gt;

&lt;h1 id=&quot;A-Collection-of-Common-</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
    <category term="AI generate" scheme="https://victor999p.github.io/tags/AI-generate/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to Computer Programming:A Beginner&#39;s Guide</title>
    <link href="https://victor999p.github.io/posts/6778c1a2.html"/>
    <id>https://victor999p.github.io/posts/6778c1a2.html</id>
    <published>2025-08-30T08:44:00.000Z</published>
    <updated>2025-10-01T09:54:21.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🧠-Overview-概覽"><a href="#🧠-Overview-概覽" class="headerlink" title="🧠 Overview | 概覽"></a>🧠 Overview | 概覽</h2><p>This post summarizes key concepts from the <strong>CS1302: Introduction to Computer Programming</strong> lecture notes from <em>City University of Hong Kong</em>.<br>本文總結了香港城市大學《CS1302：電腦編程入門》課程筆記的重點內容。</p><p>It covers computer fundamentals, programming concepts, and an introduction to Python. Designed for beginners, it explains everything from hardware basics to why Python is a great starting language.<br>內容涵蓋電腦基本原理、編程概念，以及 Python 語言入門。這是一份為初學者設計的指南，從硬件基礎到為什麼 Python 是理想的入門語言都有詳細說明。</p><h2 id="💻-What-is-a-Computer-什麼是電腦？"><a href="#💻-What-is-a-Computer-什麼是電腦？" class="headerlink" title="💻 What is a Computer? | 什麼是電腦？"></a>💻 What is a Computer? | 什麼是電腦？</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Computer_architecture_block_diagram.png/960px-Computer_architecture_block_diagram.png" alt="Computer architecture"></p><p>A computer is more than an advanced calculator—it’s an electronic device that manipulates data and performs arithmetic operations.<br>電腦不僅僅是高級計算機，它是一種能夠處理資料並執行算術操作的電子設備。</p><p>Unlike ancient tools like the <strong>abacus</strong>, modern computers are programmable and versatile.<br>與古老的工具如算盤不同，現代電腦具有可編程性和多功能性。</p><h2 id="🧩-Von-Neumann-Architecture-馮·諾依曼架構"><a href="#🧩-Von-Neumann-Architecture-馮·諾依曼架構" class="headerlink" title="🧩 Von Neumann Architecture | 馮·諾依曼架構"></a>🧩 Von Neumann Architecture | 馮·諾依曼架構</h2><p>Most computers follow the <strong>Von Neumann architecture</strong>, which includes:<br>大多數電腦遵循「馮·諾依曼架構」，包括：</p><ul><li><strong>Input/Output Devices</strong>: Read/write data to/from memory on CPU command.<br><strong>輸入/輸出設備</strong>：根據 CPU 指令讀取或寫入記憶體資料。<ul><li>Examples: Keyboard (input), Monitor (output), Touchscreen (both).<br>例子：鍵盤（輸入）、顯示器（輸出）、觸控螢幕（輸入與輸出）。</li></ul></li><li><strong>Central Processing Unit (CPU)</strong>: The “brain” of the computer.<br><strong>中央處理器（CPU）</strong>：電腦的「大腦」。<ul><li><strong>Arithmetic and Logic Unit (ALU)</strong>: Performs binary math operations.<br><strong>算術邏輯單元（ALU）</strong>：執行二進位數學運算。</li><li><strong>Control Unit (CU)</strong>: Directs program execution.<br><strong>控制單元（CU）</strong>：指導程式執行流程。</li></ul></li><li><strong>Main Memory</strong>: Stores data and instructions.<br><strong>主記憶體</strong>：儲存資料與指令。</li></ul><blockquote><p>🧪 A CPU simulator in the original notes visualizes the fetch-decode-execute cycle.<br>🧪 原教材中的 CPU 模擬器展示了「提取-解碼-執行」循環。</p></blockquote><h2 id="🧠-What’s-in-a-Computer-電腦的組成"><a href="#🧠-What’s-in-a-Computer-電腦的組成" class="headerlink" title="🧠 What’s in a Computer? | 電腦的組成"></a>🧠 What’s in a Computer? | 電腦的組成</h2><p>A CPU consists of several main components:<br>一個 CPU 包含以下主要組件：</p><p><img src="https://www.scientecheasy.com/wp-content/uploads/2023/07/parts-of-cpu.png" alt="CPU Diagram"></p><ul><li>Arithmetic Logic Unit (ALU): Performs arithmetic and logical operations.<br>算術邏輯單元（ALU）：執行算術和邏輯運算。</li><li>Control Unit (CU): Directs processor operations.<br>控制單元（CU）：指導處理器的操作。</li><li>Registers: Small, fast storage locations for temporary data and instructions.<br>暫存器：用於暫時儲存資料和指令的小型高速儲存區。</li></ul><h2 id="🗂️-Memory-Types-記憶體類型"><a href="#🗂️-Memory-Types-記憶體類型" class="headerlink" title="🗂️ Memory Types | 記憶體類型"></a>🗂️ Memory Types | 記憶體類型</h2><ul><li><strong>RAM (Random Access Memory)</strong>: Volatile; holds data during execution.<br><strong>RAM（隨機存取記憶體）</strong>：揮發性；執行期間儲存資料。<ul><li>Subtypes: SRAM (fast), DRAM (cheap).<br>子類型：SRAM（快速）、DRAM（便宜）。</li></ul></li><li><strong>ROM (Read-Only Memory)</strong>: Non-volatile; stores boot essentials.<br><strong>ROM（唯讀記憶體）</strong>：非揮發性；儲存開機所需資料。<ul><li>Subtypes: PROM, EPROM, EEPROM.<br>子類型：PROM、EPROM、EEPROM。</li></ul></li></ul><h2 id="🧑‍💻-What-is-Programming-什麼是編程？"><a href="#🧑‍💻-What-is-Programming-什麼是編程？" class="headerlink" title="🧑‍💻 What is Programming? | 什麼是編程？"></a>🧑‍💻 What is Programming? | 什麼是編程？</h2><p>Programming is the process of writing instructions for computers to perform tasks.<br>編程是撰寫指令讓電腦執行特定任務的過程。</p><p>It’s like giving step-by-step directions in a language the computer understands.<br>就像用電腦能理解的語言提供逐步指示。</p><h2 id="🔣-Programming-Languages-編程語言"><a href="#🔣-Programming-Languages-編程語言" class="headerlink" title="🔣 Programming Languages | 編程語言"></a>🔣 Programming Languages | 編程語言</h2><p>Computers use <strong>binary (0s and 1s)</strong> for data and instructions.<br>電腦使用 <strong>二進位（0 和 1）</strong> 來表示資料與指令。</p><ul><li>Example: Intel CPU addition → <code>00000011 00000100</code><br>例子：Intel CPU 加法 → <code>00000011 00000100</code></li><li>Why Binary? Reliable for electronic circuits (on/off states).<br>為什麼使用二進位？因為電子電路的開/關狀態非常可靠。</li></ul><h3 id="🕰️-Historical-Note-歷史小知識"><a href="#🕰️-Historical-Note-歷史小知識" class="headerlink" title="🕰️ Historical Note | 歷史小知識"></a>🕰️ Historical Note | 歷史小知識</h3><ul><li><strong>ENIAC</strong> (1940s): First electronic computer.<br><strong>ENIAC</strong>（1940年代）：第一台電子電腦。<ul><li>Used switches and inefficient decimal representation (10 bits = 1024 values).<br>使用開關並以低效方式表示十進位數字（10 位元 = 1024 種可能）。</li></ul></li></ul><h3 id="📏-Standards-for-Representation-資料表示標準"><a href="#📏-Standards-for-Representation-資料表示標準" class="headerlink" title="📏 Standards for Representation | 資料表示標準"></a>📏 Standards for Representation | 資料表示標準</h3><ul><li><strong>ASCII</strong>: 8-bit codes for English characters (<code>A</code> = <code>01000001</code>)<br><strong>ASCII</strong>：8 位元英文字元編碼（如 ‘A’ = <code>01000001</code>）</li><li><strong>Unicode</strong>: Supports global languages (e.g., Chinese, Japanese)<br><strong>Unicode</strong>：支援全球語言（如中文、日文）</li><li><strong>Numbers</strong>:  <ul><li>2’s complement for negatives<br>負數使用二的補數  </li><li>IEEE floating-point for decimals<br>小數使用 IEEE 浮點格式</li></ul></li></ul><h2 id="🧬-Generations-of-Programming-Languages-編程語言世代"><a href="#🧬-Generations-of-Programming-Languages-編程語言世代" class="headerlink" title="🧬 Generations of Programming Languages | 編程語言世代"></a>🧬 Generations of Programming Languages | 編程語言世代</h2><div class="table-container"><table><thead><tr><th>Generation</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>1st</td><td>Machine Language (binary)</td><td><code>10101010</code></td></tr><tr><td>第一代</td><td>機器語言（二進位）</td><td><code>10101010</code></td></tr><tr><td>2nd</td><td>Assembly Language (mnemonics)</td><td><code>ADD</code>, <code>SUB</code></td></tr><tr><td>第二代</td><td>組合語言（助記符）</td><td><code>ADD</code>, <code>SUB</code></td></tr><tr><td>3rd</td><td>High-Level Languages</td><td><code>Python</code>, <code>Java</code>, <code>C++</code></td></tr><tr><td>第三代</td><td>高階語言（人類可讀）</td><td><code>Python</code>, <code>Java</code>, <code>C++</code></td></tr></tbody></table></div><blockquote><p>🧠 Assembly is still useful for microprocessors. A simulator demo compares assembly vs. high-level code.<br>🧠 組合語言仍適用於微處理器等高效率場景。教材中有模擬器展示組合語言與高階語言的比較。</p></blockquote><h2 id="🐍-Introduction-to-Python-Python-語言簡介"><a href="#🐍-Introduction-to-Python-Python-語言簡介" class="headerlink" title="🐍 Introduction to Python | Python 語言簡介"></a>🐍 Introduction to Python | Python 語言簡介</h2><p>Python is chosen for its:<br>選擇 Python 的原因：</p><ul><li><strong>Expressiveness</strong>: Write less, do more.<br><strong>表達力強</strong>：少量程式碼即可完成任務。</li><li><strong>Popularity</strong>: Rich libraries (math, AI, graphics).<br><strong>廣泛使用</strong>：擁有大量函式庫（數學、AI、圖形等）。</li><li><strong>Free &amp; Open-Source</strong>: No restrictions.<br><strong>免費且開源</strong>：無使用限制。</li><li><strong>Portability</strong>: Runs on multiple platforms.<br><strong>可移植性高</strong>：跨平台執行無需修改。</li></ul><h3 id="🧪-Sample-Python-Program-Python-範例程式碼"><a href="#🧪-Sample-Python-Program-Python-範例程式碼" class="headerlink" title="🧪 Sample Python Program | Python 範例程式碼"></a>🧪 Sample Python Program | Python 範例程式碼</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime  <span class="comment"># library to obtain current year</span></span><br><span class="line"></span><br><span class="line">cohort = <span class="built_in">input</span>(<span class="string">&quot;In which year did you join CityU? [e.g., 2020]&quot;</span>)</span><br><span class="line">year = datetime.datetime.now().year - <span class="built_in">int</span>(cohort) + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;So you are a year&quot;</span>, year, <span class="string">&quot;student.&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;🧠-Overview-概覽&quot;&gt;&lt;a href=&quot;#🧠-Overview-概覽&quot; class=&quot;headerlink&quot; title=&quot;🧠 Overview | 概覽&quot;&gt;&lt;/a&gt;🧠 Overview | 概覽&lt;/h2&gt;&lt;p&gt;This post summariz</summary>
      
    
    
    
    <category term="Programming" scheme="https://victor999p.github.io/categories/Programming/"/>
    
    
    <category term="Python" scheme="https://victor999p.github.io/tags/Python/"/>
    
    <category term="CS1302" scheme="https://victor999p.github.io/tags/CS1302/"/>
    
    <category term="CityU" scheme="https://victor999p.github.io/tags/CityU/"/>
    
    <category term="Beginner" scheme="https://victor999p.github.io/tags/Beginner/"/>
    
  </entry>
  
  <entry>
    <title>Test 01</title>
    <link href="https://victor999p.github.io/posts/fe3551ce.html"/>
    <id>https://victor999p.github.io/posts/fe3551ce.html</id>
    <published>2025-08-26T07:33:35.000Z</published>
    <updated>2025-10-01T09:54:21.638Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog!<br>This is my first post using Hexo and the Butterfly theme.</p><h2 id="Why-I-started-this-blog"><a href="#Why-I-started-this-blog" class="headerlink" title="Why I started this blog"></a>Why I started this blog</h2><ul><li>To share my journey of self-improvement</li><li>To document what I learn about technology</li><li>To connect with like-minded people</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, Hexo + Butterfly !&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>Output:</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, Hexo + Butterfly + Python!</span><br></pre></td></tr></table></figure><br>Stay tuned for more updates!</p><p>test 123</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to my blog!&lt;br&gt;This is my first post using Hexo and the Butterfly theme.&lt;/p&gt;
&lt;h2 id=&quot;Why-I-started-this-blog&quot;&gt;&lt;a href=&quot;#Why-I-sta</summary>
      
    
    
    
    <category term="Test" scheme="https://victor999p.github.io/categories/Test/"/>
    
    
    <category term="introduction" scheme="https://victor999p.github.io/tags/introduction/"/>
    
    <category term="first" scheme="https://victor999p.github.io/tags/first/"/>
    
  </entry>
  
</feed>
